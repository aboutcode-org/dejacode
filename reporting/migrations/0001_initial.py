# Generated by Django 4.2.7 on 2023-11-27 21:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import dje.fields
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("dje", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Card",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="A concise and unique description of your Card.",
                        max_length=1024,
                    ),
                ),
                (
                    "number_of_results",
                    models.PositiveSmallIntegerField(
                        default=5,
                        help_text="The number of results to display in the Card.",
                    ),
                ),
                (
                    "display_changelist_link",
                    models.BooleanField(
                        default=False,
                        help_text="Display a link to the filtered changelist for admin users.",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        editable=False,
                        help_text="The application user who created the object.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)ss",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "last_modified_by",
                    dje.fields.LastModifiedByField(
                        editable=False,
                        help_text="The application user who last modified the object.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="modified_%(class)ss",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="CardLayout",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="A concise and unique description of the Card layout that indicates the theme or purpose of the layout.",
                        max_length=100,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ColumnTemplate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="A unique, descriptive title for your column template.",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="The purpose of your column template."
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        help_text="Choose the primary data source for your column template: licenses, components, or owners.",
                        limit_choices_to=models.Q(
                            models.Q(
                                ("app_label", "license_library"), ("model", "license")
                            ),
                            models.Q(
                                ("app_label", "component_catalog"),
                                ("model", "component"),
                            ),
                            models.Q(
                                ("app_label", "component_catalog"),
                                ("model", "subcomponent"),
                            ),
                            models.Q(
                                ("app_label", "component_catalog"), ("model", "package")
                            ),
                            models.Q(("app_label", "organization"), ("model", "owner")),
                            models.Q(("app_label", "workflow"), ("model", "request")),
                            models.Q(
                                ("app_label", "license_library"),
                                ("model", "licensetag"),
                            ),
                            models.Q(
                                ("app_label", "license_library"),
                                ("model", "licenseprofile"),
                            ),
                            models.Q(
                                ("app_label", "license_library"),
                                ("model", "licensechoice"),
                            ),
                            models.Q(
                                ("app_label", "product_portfolio"), ("model", "product")
                            ),
                            models.Q(
                                ("app_label", "product_portfolio"),
                                ("model", "productcomponent"),
                            ),
                            models.Q(
                                ("app_label", "product_portfolio"),
                                ("model", "productpackage"),
                            ),
                            models.Q(
                                ("app_label", "product_portfolio"),
                                ("model", "productinventoryitem"),
                            ),
                            models.Q(
                                ("app_label", "product_portfolio"),
                                ("model", "codebaseresource"),
                            ),
                            _connector="OR",
                        ),
                        on_delete=django.db.models.deletion.PROTECT,
                        to="contenttypes.contenttype",
                        verbose_name="object type",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        editable=False,
                        help_text="The application user who created the object.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)ss",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "last_modified_by",
                    dje.fields.LastModifiedByField(
                        editable=False,
                        help_text="The application user who last modified the object.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="modified_%(class)ss",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
                "unique_together": {("dataspace", "uuid"), ("dataspace", "name")},
            },
        ),
        migrations.CreateModel(
            name="Query",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="A unique, descriptive title for your query.",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="The purpose of your query."
                    ),
                ),
                (
                    "operator",
                    models.CharField(
                        choices=[("and", "and"), ("or", "or")],
                        default="and",
                        help_text='If you define more that one Filter for your query, indicate if all ("and") or any ("or") of the Filter conditions must be true.',
                        max_length=5,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        help_text="Choose the primary data source for your query: licenses, components, or owners.",
                        limit_choices_to=models.Q(
                            models.Q(
                                ("app_label", "license_library"), ("model", "license")
                            ),
                            models.Q(
                                ("app_label", "component_catalog"),
                                ("model", "component"),
                            ),
                            models.Q(
                                ("app_label", "component_catalog"),
                                ("model", "subcomponent"),
                            ),
                            models.Q(
                                ("app_label", "component_catalog"), ("model", "package")
                            ),
                            models.Q(("app_label", "organization"), ("model", "owner")),
                            models.Q(("app_label", "workflow"), ("model", "request")),
                            models.Q(
                                ("app_label", "license_library"),
                                ("model", "licensetag"),
                            ),
                            models.Q(
                                ("app_label", "license_library"),
                                ("model", "licenseprofile"),
                            ),
                            models.Q(
                                ("app_label", "license_library"),
                                ("model", "licensechoice"),
                            ),
                            models.Q(
                                ("app_label", "product_portfolio"), ("model", "product")
                            ),
                            models.Q(
                                ("app_label", "product_portfolio"),
                                ("model", "productcomponent"),
                            ),
                            models.Q(
                                ("app_label", "product_portfolio"),
                                ("model", "productpackage"),
                            ),
                            models.Q(
                                ("app_label", "product_portfolio"),
                                ("model", "productinventoryitem"),
                            ),
                            models.Q(
                                ("app_label", "product_portfolio"),
                                ("model", "codebaseresource"),
                            ),
                            _connector="OR",
                        ),
                        on_delete=django.db.models.deletion.PROTECT,
                        to="contenttypes.contenttype",
                        verbose_name="object type",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        editable=False,
                        help_text="The application user who created the object.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)ss",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "last_modified_by",
                    dje.fields.LastModifiedByField(
                        editable=False,
                        help_text="The application user who last modified the object.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="modified_%(class)ss",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "queries",
                "ordering": ("name",),
                "unique_together": {("dataspace", "uuid"), ("dataspace", "name")},
            },
        ),
        migrations.CreateModel(
            name="LayoutAssignedCard",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                ("seq", models.PositiveSmallIntegerField(db_index=True, default=0)),
                (
                    "card",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="reporting.card"
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "layout",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="reporting.cardlayout",
                    ),
                ),
            ],
            options={
                "ordering": ["seq"],
                "unique_together": {("dataspace", "uuid")},
            },
        ),
        migrations.AddField(
            model_name="cardlayout",
            name="cards",
            field=models.ManyToManyField(
                through="reporting.LayoutAssignedCard", to="reporting.card"
            ),
        ),
        migrations.AddField(
            model_name="cardlayout",
            name="created_by",
            field=models.ForeignKey(
                editable=False,
                help_text="The application user who created the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="cardlayout",
            name="dataspace",
            field=models.ForeignKey(
                editable=False,
                help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                on_delete=django.db.models.deletion.PROTECT,
                to="dje.dataspace",
            ),
        ),
        migrations.AddField(
            model_name="cardlayout",
            name="last_modified_by",
            field=dje.fields.LastModifiedByField(
                editable=False,
                help_text="The application user who last modified the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="modified_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="card",
            name="query",
            field=models.ForeignKey(
                help_text="The Query that obtains the data to show in the Card. The best kind of Query for this purpose is one that filters by a status or a modification date, in order to alert the user to recent activity that may need reviewing.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cards",
                to="reporting.query",
            ),
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The title of your Report.", max_length=100
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Provide a description of the report to explain its purpose to DejaCode users.",
                    ),
                ),
                (
                    "user_available",
                    models.BooleanField(
                        default=False,
                        help_text="Check this to provide access to non-administrative application users.",
                    ),
                ),
                (
                    "report_context",
                    models.TextField(
                        blank=True,
                        default="This DejaCode report was generated from Dataspace {{dataspace}} on {{date-time}} by {{user}}.",
                        help_text="The text in this field will appear at the top of your generated report. You may want to describe the purpose of the report in this field.",
                    ),
                ),
                (
                    "group",
                    models.CharField(
                        blank=True,
                        help_text="Use this field to group reports.",
                        max_length=100,
                    ),
                ),
                (
                    "column_template",
                    models.ForeignKey(
                        help_text="Choose one of your Column templates to define the data columns for your report.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="reporting.columntemplate",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        editable=False,
                        help_text="The application user who created the object.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)ss",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "last_modified_by",
                    dje.fields.LastModifiedByField(
                        editable=False,
                        help_text="The application user who last modified the object.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="modified_%(class)ss",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "query",
                    models.ForeignKey(
                        help_text="Choose one of your Queries to select the data for your report.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="reporting.query",
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
                "unique_together": {("dataspace", "uuid"), ("dataspace", "name")},
            },
        ),
        migrations.CreateModel(
            name="OrderField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                ("field_name", models.TextField()),
                (
                    "sort",
                    models.TextField(
                        choices=[
                            ("ascending", "ascending"),
                            ("descending", "descending"),
                        ],
                        default="ascending",
                    ),
                ),
                ("seq", models.PositiveSmallIntegerField()),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "query",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="order_fields",
                        to="reporting.query",
                    ),
                ),
            ],
            options={
                "ordering": ("seq",),
                "unique_together": {("dataspace", "uuid")},
            },
        ),
        migrations.CreateModel(
            name="Filter",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                ("field_name", models.TextField()),
                (
                    "lookup",
                    models.CharField(
                        choices=[
                            ("exact", "Exact match. (e.g.: apache-2.0)"),
                            (
                                "iexact",
                                "Case-insensitive exact match. (e.g.: APACHE-2.0)",
                            ),
                            (
                                "contains",
                                "Case-sensitive containment test. (e.g.: apache)",
                            ),
                            (
                                "icontains",
                                "Case-insensitive containment test. (e.g.: Apache)",
                            ),
                            (
                                "in",
                                'In a given list. (e.g.: ["apache-1.1", "apache-2.0"])',
                            ),
                            ("startswith", "Case-sensitive starts-with."),
                            ("istartswith", "Case-insensitive starts-with."),
                            ("endswith", "Case-sensitive ends-with."),
                            ("iendswith", "Case-insensitive ends-with."),
                            ("gt", "Greater than."),
                            ("gte", "Greater than or equal to."),
                            ("lt", "Less than."),
                            ("lte", "Less than or equal to."),
                            ("year", "Exact year match."),
                            ("month", "Exact month match."),
                            ("day", "Exact day match."),
                            ("isnull", "IS NULL. Takes either True or False."),
                            ("isempty", "IS EMPTY. Takes either True or False."),
                            (
                                "regex",
                                'Case-sensitive regular expression match. (e.g.: r"^(A?)+")',
                            ),
                            (
                                "descendant",
                                "Hierarchy traversal: Descendant of (id). (e.g.: 1337)",
                            ),
                            (
                                "product_descendant",
                                "Product Hierarchy traversal. Takes product identifier name:version or id",
                            ),
                        ],
                        max_length=30,
                    ),
                ),
                ("value", models.TextField(blank=True)),
                ("runtime_parameter", models.BooleanField(default=False)),
                (
                    "negate",
                    models.BooleanField(
                        default=False,
                        help_text='Check to negate this lookup, as in "does NOT match". This can be combined with regular lookups.',
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "query",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="filters",
                        to="reporting.query",
                    ),
                ),
            ],
            options={
                "ordering": ("pk",),
                "unique_together": {("dataspace", "uuid")},
            },
        ),
        migrations.CreateModel(
            name="ColumnTemplateAssignedField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                ("field_name", models.TextField()),
                ("display_name", models.CharField(blank=True, max_length=70)),
                ("seq", models.PositiveSmallIntegerField()),
                (
                    "column_template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fields",
                        to="reporting.columntemplate",
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
            ],
            options={
                "ordering": ("seq",),
                "unique_together": {("dataspace", "uuid")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="cardlayout",
            unique_together={("dataspace", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="card",
            unique_together={("dataspace", "title")},
        ),
    ]
