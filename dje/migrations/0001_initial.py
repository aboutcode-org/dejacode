# Generated by Django 4.2.7 on 2023-11-27 21:12

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import dje.fields
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="DejacodeUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "data_email_notification",
                    models.BooleanField(
                        default=False,
                        help_text="Check this to send email notifications to the user regarding DejaCode data updates; note that the volume could be very large, so this option is normally enabled only during system setup and rollout to monitor application activity.",
                    ),
                ),
                (
                    "workflow_email_notification",
                    models.BooleanField(
                        default=False,
                        help_text="Check this to send email notifications to the user for associated workflow requests; otherwise, request notifications alerts will appear in the DejaCode notifications form.",
                    ),
                ),
                (
                    "updates_email_notification",
                    models.BooleanField(
                        default=False,
                        help_text="Check this to receive email notifications with updates on DejaCode features and news.",
                    ),
                ),
                (
                    "company",
                    models.CharField(
                        blank=True,
                        help_text="The company the user is associated with. This can be submitted during the signup process.",
                        max_length=30,
                    ),
                ),
                (
                    "last_api_access",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last API access"
                    ),
                ),
            ],
            options={
                "ordering": ["username"],
            },
        ),
        migrations.CreateModel(
            name="Dataspace",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "name",
                    models.SlugField(
                        help_text='Unique name of a Dataspace. The name "nexB" is reserved for the creators/maintainers of the system software. Dataspace name only allows letters, numbers, underscores and hyphens.',
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "homepage_url",
                    models.URLField(
                        blank=True,
                        help_text="The homepage URL of the Dataspace owner.",
                        max_length=1024,
                        verbose_name="Homepage URL",
                    ),
                ),
                (
                    "contact_info",
                    models.CharField(
                        blank=True,
                        help_text="A dedicated email address or URL for contacting the owner of the Dataspace. Can be used for Attribution Package generation.",
                        max_length=500,
                        verbose_name="Contact information",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Extended Notes about a Dataspace."
                    ),
                ),
                (
                    "show_license_profile_in_license_list_view",
                    models.BooleanField(
                        default=False,
                        help_text="When true (checked), include the license profile column in the license list view.",
                        verbose_name="Show license profile in license list view",
                    ),
                ),
                (
                    "show_license_type_in_license_list_view",
                    models.BooleanField(
                        default=True,
                        help_text="When true (checked), include the license type column in the license list view.",
                    ),
                ),
                (
                    "show_spdx_short_identifier_in_license_list_view",
                    models.BooleanField(
                        default=False,
                        help_text="When true (checked), include the SPDX short identifier in the license list view.",
                        verbose_name="show SPDX short identifier in license list view",
                    ),
                ),
                (
                    "show_usage_policy_in_user_views",
                    models.BooleanField(
                        default=True,
                        help_text="When true (checked), include the usage policy in user views that show licenses or components.",
                    ),
                ),
                (
                    "show_type_in_component_list_view",
                    models.BooleanField(
                        default=False,
                        help_text="When true (checked), include the type column in the component list view.",
                    ),
                ),
                (
                    "hide_empty_fields_in_component_details_view",
                    models.BooleanField(
                        default=False,
                        help_text="When true (checked), hide empty fields in the component details view.",
                    ),
                ),
                (
                    "set_usage_policy_on_new_component_from_licenses",
                    models.BooleanField(
                        default=False,
                        help_text="When true (checked), the application will automatically assign a usage policy to a component or package when its license expression is set or updated when you create, import, edit, or copy that component or package, based on the associated policies that you have defined on the license policy.",
                        verbose_name="set usage policy on component or package from license policy",
                    ),
                ),
                (
                    "logo_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to a Dataspace Logo. If set, it will be included in reports.",
                        max_length=1024,
                        verbose_name="Logo URL",
                    ),
                ),
                (
                    "full_name",
                    models.CharField(
                        blank=True,
                        help_text="The full name of the Dataspace organization. Can be used for Attribution Package generation.",
                        max_length=100,
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True,
                        help_text="The address of the Dataspace organization. Can be used for Attribution Package generation.",
                    ),
                ),
                (
                    "open_source_information_url",
                    models.URLField(
                        blank=True,
                        help_text="A public URL where you publish information about the Dataspace organization's Open Source policies and procedures. Can be used for Attribution Package generation.",
                        max_length=1024,
                        verbose_name="Open Source Information URL",
                    ),
                ),
                (
                    "open_source_download_url",
                    models.URLField(
                        blank=True,
                        help_text="A public URL where you provide copies of Open Source software that require Redistribution when you use them in your products. Can be used for Attribution Package generation.",
                        max_length=1024,
                        verbose_name="Open Source Download URL",
                    ),
                ),
                (
                    "home_page_announcements",
                    models.TextField(
                        blank=True,
                        help_text="Use this field to enter text to appear on the DejaCode home page, normally for the purpose of providing your user community with general-purpose announcements about using DejaCode. Note that you can include URL's in the text if you want to direct users to detailed instructions and announcements.",
                    ),
                ),
                (
                    "enable_package_scanning",
                    models.BooleanField(
                        default=False,
                        help_text='When true (checked), allows a user to click the "Scan Package" button when viewing a Package, initiating a call to ScanCode.io to scan the Package based on its URL. This setting also activates a DejaCode feature to submit any Package created using the "Add Package" button to ScanCode.io for scanning, and it activates the Scans choice from the DejaCode Tools dropdown menu.',
                    ),
                ),
                (
                    "update_packages_from_scan",
                    models.BooleanField(
                        default=False,
                        help_text="When true (checked), enables an automatic DejaCode process to update selected Package fields (such as license expression, primary language, copyright, etc.) when a package scan is completed, depending on the quality of the scan results.",
                        verbose_name="Update packages automatically from scan",
                    ),
                ),
                (
                    "enable_purldb_access",
                    models.BooleanField(
                        default=False,
                        help_text="When true (checked), enables user access to the PurlDB option from the Tools menu, which presents a list of PurlDB data mined and scanned automatically from multiple public sources. Users can view PurlDB details and can create DejaCode Package definitions using those details, and DejaCode also presents a new PurlDB tab when viewing the details of a Package with matching key values. This option also enhances the Global Search feature to extend the search scope beyond the standard DejaCode objects (Packages, Components, Licenses, Owners) and perform an asynchronous query of the PurlDB to find relevant data.",
                        verbose_name="Enable PurlDB access",
                    ),
                ),
                (
                    "enable_vulnerablecodedb_access",
                    models.BooleanField(
                        default=False,
                        help_text="When true (checked), authorizes DejaCode to access the VulnerableCodeDB using a Package URL (purl) to determine if there are any reported vulnerabilities for a specific Package and return the Vulnerability ID and related URLs to a Vulnerabilities tab in the Package details user view.",
                        verbose_name="Enable VulnerableCodeDB access",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="History",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "serialized_data",
                    models.TextField(
                        blank=True,
                        editable=False,
                        help_text="Serialized data of the instance just before this change.",
                        null=True,
                    ),
                ),
                (
                    "action_time",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="action time",
                    ),
                ),
                (
                    "object_id",
                    models.TextField(blank=True, null=True, verbose_name="object id"),
                ),
                (
                    "object_repr",
                    models.CharField(max_length=200, verbose_name="object repr"),
                ),
                (
                    "action_flag",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Addition"), (2, "Change"), (3, "Deletion")],
                        verbose_name="action flag",
                    ),
                ),
                (
                    "change_message",
                    models.TextField(blank=True, verbose_name="change message"),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="contenttypes.contenttype",
                        verbose_name="content type",
                    ),
                ),
                (
                    "object_dataspace",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "history entry",
                "verbose_name_plural": "history entries",
                "ordering": ("-action_time",),
            },
        ),
        migrations.CreateModel(
            name="ExternalSource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="A Label is a concise name of the external source as it is commonly known.",
                        max_length=50,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes describe the purpose and special characteristics of the external source.",
                    ),
                ),
                (
                    "homepage_url",
                    models.URLField(
                        blank=True,
                        help_text="Main homepage URL of the external source.",
                        max_length=1024,
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
            ],
            options={
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="ExternalReference",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "external_id",
                    models.CharField(
                        blank=True,
                        help_text="Value of the identifier used on the source to reference the object.",
                        max_length=500,
                    ),
                ),
                (
                    "external_url",
                    models.URLField(
                        blank=True,
                        help_text="A URL to the component, or component metadata, in the external source.",
                        max_length=1024,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            models.Q(("app_label", "organization"), ("model", "owner")),
                            models.Q(
                                ("app_label", "license_library"), ("model", "license")
                            ),
                            models.Q(
                                ("app_label", "component_catalog"),
                                ("model", "component"),
                            ),
                            models.Q(
                                ("app_label", "component_catalog"), ("model", "package")
                            ),
                            _connector="OR",
                        ),
                        on_delete=django.db.models.deletion.PROTECT,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        editable=False,
                        help_text="The application user who created the object.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)ss",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "external_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.externalsource",
                    ),
                ),
                (
                    "last_modified_by",
                    dje.fields.LastModifiedByField(
                        editable=False,
                        help_text="The application user who last modified the object.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="modified_%(class)ss",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["external_source", "external_id"],
            },
        ),
        migrations.CreateModel(
            name="DataspaceConfiguration",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tab_permissions", models.JSONField(blank=True, default=dict)),
                ("copy_defaults", models.JSONField(blank=True, null=True)),
                (
                    "scancodeio_url",
                    models.URLField(
                        blank=True,
                        help_text="Enter the URL of your organization's private ScanCode.io instance, if available. If not, DejaCode will use the public ScanCode.io instance to scan your Packages.",
                        max_length=1024,
                        verbose_name="ScanCode.io URL",
                    ),
                ),
                (
                    "scancodeio_api_key",
                    models.CharField(
                        blank=True,
                        help_text="If your organization's private ScanCode.io instance requires an API key for access, provide it here. Otherwise, you can leave this field empty.",
                        max_length=40,
                        verbose_name="ScanCode.io API key",
                    ),
                ),
                (
                    "vulnerablecode_url",
                    models.URLField(
                        blank=True,
                        help_text="If your organization has a private VulnerableCode instance, enter its URL here. Otherwise, DejaCode will use the public VulnerableCode to check for vulnerabilities",
                        max_length=1024,
                        verbose_name="VulnerableCode URL",
                    ),
                ),
                (
                    "vulnerablecode_api_key",
                    models.CharField(
                        blank=True,
                        help_text="If your private VulnerableCode instance requires an API key for access, input it here. If not, you can leave this field blank.",
                        max_length=40,
                        verbose_name="VulnerableCode API key",
                    ),
                ),
                (
                    "purldb_url",
                    models.URLField(
                        blank=True,
                        help_text="Enter the URL of your organization's private PurlDB instance, if applicable. If not, DejaCode will utilize the public PurlDB to offer a database of Packages collected from public sources.",
                        max_length=1024,
                        verbose_name="PurlDB URL",
                    ),
                ),
                (
                    "purldb_api_key",
                    models.CharField(
                        blank=True,
                        help_text="If your organization's private PurlDB instance requires an API key for access, provide it here. If not, you can leave this field empty.",
                        max_length=40,
                        verbose_name="PurlDB API key",
                    ),
                ),
                (
                    "dataspace",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="configuration",
                        to="dje.dataspace",
                    ),
                ),
            ],
        ),
    ]
