.. _reference_vulnerability_management:

Vulnerability Management
========================

DejaCode provides a comprehensive system for managing vulnerabilities in your software
products, leveraging the **VulnerableCodeDB** service for accurate and up-to-date
vulnerability data.

This documentation outlines how vulnerabilities are **collected**, **displayed**, and
**analyzed** within DejaCode.

Introduction
------------

DejaCodeâ€™s vulnerability management system relies on the **VulnerableCodeDB** service
to collect and process vulnerability data. This service is integrated into DejaCode to
provide seamless tracking and management of vulnerabilities associated with software
packages and components.

1. Enabling VulnerableCodeDB Service
------------------------------------

To utilize vulnerability management features, ensure that the **VulnerableCodeDB**
service is enabled in your Dataspace configuration.

Refer to the :ref:`dejacode_dataspace_vulnerablecode` chapter for instructions on
setting up the **VulnerableCodeDB** service in your Dataspace.

2. Collecting Vulnerability Data
---------------------------------

Vulnerabilities are fetched **daily** from the **VulnerableCodeDB** service to create
and update **Vulnerability** records in DejaCode. This ensures that vulnerability data
remains **current** and **reliable**.

In addition to the daily updates, vulnerabilities are also fetched **whenever
packages are created or modified**, ensuring their vulnerability status is always
up-to-date.

Vulnerabilities are retrieved during various **package management events**, including:

- Adding a Package using a **PURL** or download URL.
- Importing **scan data**.
- Loading **SBOMs**.
- Importing **manifests**.
- Pulling data from a **ScanCode.io project**.

.. tip::
   The **latest vulnerability data refresh date** is displayed in the **Admin
   dashboard** ("Data Updates" section) and the **Integration Status** page.

3. Understanding Vulnerability Fields
--------------------------------------

The **Vulnerability** model in DejaCode provides detailed information about software
vulnerabilities. Each field captures specific aspects of a vulnerability, enabling
accurate assessment and management. Below is a description of the key fields:

- **vulnerability_id**:
  A unique identifier for the vulnerability. For example, **"VCID-2024-0001"**.

- **resource_url**:
  The URL of the data source providing details about the vulnerability.

- **summary**:
  A brief description of the vulnerability, summarizing its nature and potential impact.

- **aliases**:
  A list of alternate identifiers for the vulnerability, such as **CVE identifiers**
  (e.g., **"CVE-2017-1000136"**). This field helps link the vulnerability to related
  records.

- **exploitability**:
  Indicates the likelihood of the vulnerability being **exploited**, with the following
  options:

  - **0.5**: No known exploits.
  - **1.0**: Potential exploits exist.
  - **2.0**: Known exploits are available.

  This value is determined automatically based on the discovery of exploits and helps
  assess the risk associated with the vulnerability.

- **weighted_severity**:
  A calculated severity score derived from the highest severity value multiplied by
  its corresponding weight. This value helps prioritize vulnerabilities based on
  their potential impact.

- **risk_score**:
  A normalized score ranging from **0.0** to **10.0**, representing the **overall risk**
  posed by the vulnerability.
  The **risk score** is calculated as the maximum of the weighted severity multiplied
  by the exploitability score, capped at 10.
  **A higher risk score indicates a greater potential threat.**

These fields collectively provide a comprehensive view of each vulnerability,
supporting informed decision-making in the context of vulnerability management.
