# Generated by Django 4.2.7 on 2023-11-27 21:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import dje.fields
import license_library.models
import re
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("dje", "0001_initial"),
        ("organization", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="License",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "reference_notes",
                    models.TextField(
                        blank=True,
                        help_text="Reference Notes provide background details about the sofware and licenses in DejaCode, alerting you to pertinent ownership history or licensing complexities",
                    ),
                ),
                (
                    "request_count",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "key",
                    models.CharField(
                        db_index=True,
                        help_text="Unique key name of the license.",
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[-\\w\\.]+$"),
                                "Enter a valid 'slug' consisting of letters, numbers, underscores, dots or hyphens.",
                                "invalid",
                            )
                        ],
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="The full name of the license, as provided by the original authors.",
                        max_length=100,
                    ),
                ),
                (
                    "short_name",
                    models.CharField(
                        db_index=True,
                        help_text="Most commonly used name for the license, often abbreviated.",
                        max_length=50,
                        verbose_name="Short Name",
                    ),
                ),
                (
                    "keywords",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Keywords to associate with a license to ensure that the license will be found when a user searches on one or more of the keywords. Examples include alternative names for the license, or file/product names that are commonly associated with the license.",
                        max_length=500,
                    ),
                ),
                (
                    "homepage_url",
                    models.URLField(
                        blank=True,
                        help_text="Homepage URL for the license.",
                        max_length=1024,
                        verbose_name="Homepage URL",
                    ),
                ),
                (
                    "full_text",
                    dje.fields.NoStripTextField(
                        blank=True,
                        help_text="The full text of the license. Note that actual usage of a license with software may include copyright statements and owner information.",
                    ),
                ),
                (
                    "standard_notice",
                    dje.fields.NoStripTextField(
                        blank=True,
                        help_text="The standard notice text for this license if it exists.",
                    ),
                ),
                (
                    "text_urls",
                    models.TextField(
                        blank=True,
                        help_text="URLs to the text of the license (plain text or HTML) on the main site of this license.",
                        verbose_name="Text URLs",
                    ),
                ),
                (
                    "faq_url",
                    models.URLField(
                        blank=True,
                        help_text="URL of a page with Frequently Asked Questions about this license.",
                        max_length=1024,
                        verbose_name="FAQ URL",
                    ),
                ),
                (
                    "osi_url",
                    models.URLField(
                        blank=True,
                        help_text="URL on the OSI website http://opensource.org for OSI-approved licenses.",
                        max_length=1024,
                        verbose_name="OSI URL",
                    ),
                ),
                (
                    "other_urls",
                    models.TextField(
                        blank=True,
                        help_text="Other URLs that identify this license, such as URLs to this license in different open-source projects. Obsolete links may be kept here, as they may be useful for historical analysis purpose.",
                        verbose_name="Other URLs",
                    ),
                ),
                (
                    "reviewed",
                    models.BooleanField(
                        default=False,
                        help_text="True / False (yes/no) - regarding whether a system license definition has been reviewed by an administrator. Defaults to False.",
                    ),
                ),
                (
                    "publication_year",
                    models.CharField(
                        blank=True,
                        help_text="Year this license was first published, in four-digits format.",
                        max_length=4,
                    ),
                ),
                (
                    "spdx_license_key",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Short identifier of the license as stated on each license detail page at https://spdx.org/licenses/ or a LicenseRef value that points to another license list.",
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[a-zA-Z\\d\\-.]+$"),
                                "Enter a valid value consisting of letters, numbers, dots or hyphens.",
                                "invalid",
                            )
                        ],
                        verbose_name="SPDX short identifier",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        help_text="When set to True (Yes), this field indicates that a license definition in the library is currently in use (active). When set to False (No), this field indicates that a license is deprecated (inactive) and should not be used, and the license will not appear in the user views. When the field value is Unknown, the license will not appear in the user views, usually suggesting that the license has not yet been evaluated.",
                        null=True,
                        verbose_name="Is active",
                    ),
                ),
                (
                    "curation_level",
                    models.PositiveSmallIntegerField(
                        db_index=True,
                        default=0,
                        help_text='A numeric value, from 0 to 100, that indicates the level of completeness of all the pertinent license data, as well as the state of that data being reviewed by a senior administrator. General Guidelines: "10" indicates basic data present. "20" indicates Category and License Style assigned. "30" indicates all Obligation Tags are set. "40" indicates all License Tags are set. "50" indicates all previous conditions plus URL fields set. Anything above that is at the discretion of a senior administrative reviewer.',
                        validators=[django.core.validators.MaxValueValidator(100)],
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes for administrative use only, primarily intended to communicate special considerations about the interpretation of a license.",
                    ),
                ),
                (
                    "guidance",
                    models.TextField(
                        blank=True,
                        help_text="Guidance notes maintained by an administrator to be communicated to the users who view the License Library, primarily intended to provide cautionary and/or policy information.",
                    ),
                ),
                (
                    "special_obligations",
                    models.TextField(
                        blank=True,
                        help_text="A concise description, maintained by an administrator, of the obligations (or restrictions) mandated by the license which are not communicated by the standard tag assignments of License profile associated with this License.",
                    ),
                ),
                (
                    "is_component_license",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="When set to Yes, indicates that this license is assigned by a component-creator to one or more versions of a component, and is not generally used by other components.",
                    ),
                ),
                (
                    "is_exception",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="When set to Yes, indicates that this license is actually an exception applied to another license in order to modify specific conditions of that other license.",
                    ),
                ),
                (
                    "guidance_url",
                    models.CharField(
                        blank=True,
                        help_text="A URL to a page that documents your organization's policies and procedures that relate to the obligations and restrictions associated with this license or with similar licenses.",
                        max_length=1024,
                        verbose_name="Guidance URL",
                    ),
                ),
                (
                    "popularity",
                    models.PositiveSmallIntegerField(
                        db_index=True,
                        default=0,
                        help_text="A numeric value assigned to a license and maintained by a DejaCode administrator, that indicates the relative popularity of a license as used by public software projects. The value influences the default license ordering of the User License List, as well as the ordering of the suggested licenses presented as a dropdown list when you enter text in a DejaCode license expression field. Popularity values are originally provided in DejaCode Reference Data, but your administrator has the option to modify them for your dataspace.",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("af", "Afrikaans"),
                            ("ar", "Arabic"),
                            ("ar-dz", "Algerian Arabic"),
                            ("ast", "Asturian"),
                            ("az", "Azerbaijani"),
                            ("be", "Belarusian"),
                            ("bg", "Bulgarian"),
                            ("bn", "Bengali"),
                            ("br", "Breton"),
                            ("bs", "Bosnian"),
                            ("ca", "Catalan"),
                            ("cs", "Czech"),
                            ("cy", "Welsh"),
                            ("da", "Danish"),
                            ("de", "German"),
                            ("dsb", "Lower Sorbian"),
                            ("el", "Greek"),
                            ("en", "English"),
                            ("en-au", "Australian English"),
                            ("en-gb", "British English"),
                            ("eo", "Esperanto"),
                            ("es", "Spanish"),
                            ("es-ar", "Argentinian Spanish"),
                            ("es-co", "Colombian Spanish"),
                            ("es-mx", "Mexican Spanish"),
                            ("es-ni", "Nicaraguan Spanish"),
                            ("es-ve", "Venezuelan Spanish"),
                            ("et", "Estonian"),
                            ("eu", "Basque"),
                            ("fa", "Persian"),
                            ("fi", "Finnish"),
                            ("fr", "French"),
                            ("fy", "Frisian"),
                            ("ga", "Irish"),
                            ("gd", "Scottish Gaelic"),
                            ("gl", "Galician"),
                            ("he", "Hebrew"),
                            ("hi", "Hindi"),
                            ("hr", "Croatian"),
                            ("hsb", "Upper Sorbian"),
                            ("hu", "Hungarian"),
                            ("hy", "Armenian"),
                            ("ia", "Interlingua"),
                            ("io", "Ido"),
                            ("id", "Indonesian"),
                            ("ig", "Igbo"),
                            ("is", "Icelandic"),
                            ("it", "Italian"),
                            ("ja", "Japanese"),
                            ("ka", "Georgian"),
                            ("kab", "Kabyle"),
                            ("kk", "Kazakh"),
                            ("km", "Khmer"),
                            ("kn", "Kannada"),
                            ("ko", "Korean"),
                            ("ky", "Kyrgyz"),
                            ("lb", "Luxembourgish"),
                            ("lt", "Lithuanian"),
                            ("lv", "Latvian"),
                            ("mk", "Macedonian"),
                            ("ml", "Malayalam"),
                            ("mn", "Mongolian"),
                            ("mr", "Marathi"),
                            ("ms", "Malay"),
                            ("my", "Burmese"),
                            ("nb", "Norwegian Bokmal"),
                            ("ne", "Nepali"),
                            ("nl", "Dutch"),
                            ("nn", "Norwegian Nynorsk"),
                            ("no", "Norwegian"),
                            ("os", "Ossetic"),
                            ("pa", "Punjabi"),
                            ("pl", "Polish"),
                            ("pt", "Portuguese"),
                            ("pt-br", "Brazilian Portuguese"),
                            ("ro", "Romanian"),
                            ("ru", "Russian"),
                            ("sk", "Slovak"),
                            ("sl", "Slovenian"),
                            ("sq", "Albanian"),
                            ("sr", "Serbian"),
                            ("sr-latn", "Serbian Latin"),
                            ("sv", "Swedish"),
                            ("sw", "Swahili"),
                            ("ta", "Tamil"),
                            ("te", "Telugu"),
                            ("tg", "Tajik"),
                            ("th", "Thai"),
                            ("tk", "Turkmen"),
                            ("tr", "Turkish"),
                            ("tt", "Tatar"),
                            ("udm", "Udmurt"),
                            ("uk", "Ukrainian"),
                            ("ur", "Urdu"),
                            ("uz", "Uzbek"),
                            ("vi", "Vietnamese"),
                            ("zh-hans", "Simplified Chinese"),
                            ("zh-hant", "Traditional Chinese"),
                        ],
                        help_text="The language for this license, stored in standard language ID format.",
                        max_length=10,
                    ),
                ),
            ],
            options={
                "ordering": ["-popularity", "name"],
                "permissions": (
                    (
                        "change_usage_policy_on_license",
                        "Can change the usage_policy of license",
                    ),
                ),
            },
            bases=(license_library.models.LicenseSymbolMixin, models.Model),
        ),
        migrations.CreateModel(
            name="LicenseProfile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="A descriptive name for the License profile.",
                        max_length=50,
                    ),
                ),
                (
                    "examples",
                    models.TextField(
                        blank=True,
                        help_text="Free-form text to identify examples of licenses that illustrate this License profile.",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Extended notes about a License profile (for example, to explain some kind of special obligation).",
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
            ],
            options={
                "verbose_name": "license profile",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="LicenseTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Organization-defined Label to identify a Tag that can be applied to a Tag Group.",
                        max_length=50,
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        help_text="Text to describe a Tag that can be applied to a Tag Group by an Organization."
                    ),
                ),
                (
                    "guidance",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the criteria for setting the Tag assigned value, including examples (snippets) of representative license text that supports the determination of the License Tag assigned value.",
                    ),
                ),
                (
                    "default_value",
                    models.BooleanField(help_text="Yes, No, Unknown", null=True),
                ),
                (
                    "show_in_license_list_view",
                    models.BooleanField(
                        default=False,
                        help_text="When true (checked), include this Tag (both label and value) in the License Library Viewer. Intended for the most critical Tags only, such as those associated with source code redistribution and patent impact.",
                    ),
                ),
                (
                    "attribution_required",
                    models.BooleanField(
                        default=False,
                        help_text="When true (checked), a license with this Tag requires attribution in the source code or the documentation of the product where the licensed software is being used, or both.",
                    ),
                ),
                (
                    "redistribution_required",
                    models.BooleanField(
                        default=False,
                        help_text="When true (checked), a license with this Tag requires the product documentation to include instructions regarding how to obtain source code for the licensed software, including any modifications to it.",
                    ),
                ),
                (
                    "change_tracking_required",
                    models.BooleanField(
                        default=False,
                        help_text="When true (checked), a license with this Tag requires any modifications to licensed software to be documented in the source code, the associated product documentation, or both.",
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
            ],
            options={
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="LicenseTagGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="A descriptive name for the Tag Group.", max_length=50
                    ),
                ),
                (
                    "seq",
                    models.PositiveSmallIntegerField(
                        db_index=True,
                        default=0,
                        help_text="The order in which a License Tag should be presented in the context of the other License Tag.",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Extended notes about a Tag Group (for example, to explain some kind of special obligation).",
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
            ],
            options={
                "ordering": ["seq"],
            },
        ),
        migrations.CreateModel(
            name="LicenseTagGroupAssignedTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "seq",
                    models.PositiveSmallIntegerField(
                        db_index=True,
                        default=0,
                        help_text="The order in which a License Tag Group should be presented in the context of the other License Tag Group.",
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "license_tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="license_library.licensetag",
                    ),
                ),
                (
                    "license_tag_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="license_library.licensetaggroup",
                    ),
                ),
            ],
            options={
                "ordering": ("license_tag_group__seq", "seq"),
            },
        ),
        migrations.AddField(
            model_name="licensetaggroup",
            name="tags",
            field=models.ManyToManyField(
                through="license_library.LicenseTagGroupAssignedTag",
                to="license_library.licensetag",
            ),
        ),
        migrations.CreateModel(
            name="LicenseStyle",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="A descriptive name for the License Style.",
                        max_length=50,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional explanation of the License Style, such as the nature of any license choices.",
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="LicenseStatus",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Organization-defined Code to identify a Status that can be applied to a License.",
                        max_length=50,
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        help_text="Text to describe a Status that can be applied to a License by an Organization."
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "license status",
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="LicenseProfileAssignedTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                ("value", models.BooleanField(default=False)),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "license_profile",
                    models.ForeignKey(
                        help_text="The ID of the License profile to which this License tag, with its corresponding value, has been assigned to a dataspace.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="license_library.licenseprofile",
                    ),
                ),
                (
                    "license_tag",
                    models.ForeignKey(
                        help_text="The ID of the License Tag which, with its corresponding value, has been assigned in a dataspace to this License profile",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="license_library.licensetag",
                        verbose_name="License tag",
                    ),
                ),
            ],
            options={
                "verbose_name": "license profile assigned tag",
                "ordering": ["license_tag__label"],
            },
        ),
        migrations.AddField(
            model_name="licenseprofile",
            name="tags",
            field=models.ManyToManyField(
                through="license_library.LicenseProfileAssignedTag",
                to="license_library.licensetag",
            ),
        ),
        migrations.CreateModel(
            name="LicenseChoice",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "from_expression",
                    models.CharField(
                        help_text="A license key or license expression snippet.",
                        max_length=1024,
                    ),
                ),
                (
                    "to_expression",
                    models.CharField(
                        help_text="A license key or license expression snippet.",
                        max_length=1024,
                    ),
                ),
                (
                    "seq",
                    models.PositiveSmallIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Use the sequence value to indicate your license choice preference policies for a particular license expression, using zero (0) as the first and preferred choice, followed by other sequences that define acceptable choices.",
                    ),
                ),
                ("notes", models.TextField(blank=True, help_text="Notes.")),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
            ],
            options={
                "ordering": ["seq"],
            },
        ),
        migrations.CreateModel(
            name="LicenseCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="The descriptive name of a License Category.",
                        max_length=50,
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        help_text="Descriptive, explanatory text about a License Category."
                    ),
                ),
                (
                    "license_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Open Source", "Open Source"),
                            ("Closed Source", "Closed Source"),
                        ],
                        db_index=True,
                        help_text="A License Type identifies the high level nature of a License Category: Open Source or Closed Source.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "license categories",
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="LicenseAssignedTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                ("value", models.BooleanField(help_text="Yes, No, Unknown", null=True)),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "license",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="license_library.license",
                    ),
                ),
                (
                    "license_tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="license_library.licensetag",
                    ),
                ),
            ],
            options={
                "ordering": ["license"],
            },
        ),
        migrations.CreateModel(
            name="LicenseAnnotation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                ("text", models.TextField(blank=True)),
                ("quote", models.TextField(blank=True)),
                ("range_start_offset", models.IntegerField()),
                ("range_end_offset", models.IntegerField()),
                (
                    "assigned_tag",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="license_library.licenseassignedtag",
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "license",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="annotations",
                        to="license_library.license",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="license",
            name="category",
            field=models.ForeignKey(
                blank=True,
                help_text="A license category, identified by a code, provides a major grouping for licenses, generally describing the relationship between the licensor and licensee.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="license_library.licensecategory",
            ),
        ),
        migrations.AddField(
            model_name="license",
            name="created_by",
            field=models.ForeignKey(
                editable=False,
                help_text="The application user who created the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="license",
            name="dataspace",
            field=models.ForeignKey(
                editable=False,
                help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                on_delete=django.db.models.deletion.PROTECT,
                to="dje.dataspace",
            ),
        ),
        migrations.AddField(
            model_name="license",
            name="last_modified_by",
            field=dje.fields.LastModifiedByField(
                editable=False,
                help_text="The application user who last modified the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="modified_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="license",
            name="license_profile",
            field=models.ForeignKey(
                blank=True,
                help_text='License profile: a selection of license tags and their values, identified by a numeric code, in order to provide a convenient way to assign a set of tag values to a license. A "Tag" identifies a frequently encountered obligation, restriction, or other notable characteristic of license terms. Note that individual tag value assignments may vary by license.',
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="license_library.licenseprofile",
                verbose_name="License profile",
            ),
        ),
        migrations.AddField(
            model_name="license",
            name="license_status",
            field=models.ForeignKey(
                blank=True,
                help_text="An organization can use the license status to communicate the current stage of the license configuration review process.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="license_library.licensestatus",
                verbose_name="configuration status",
            ),
        ),
        migrations.AddField(
            model_name="license",
            name="license_style",
            field=models.ForeignKey(
                blank=True,
                help_text="A license style identifies a group of miscellaneous characteristics about a license, which may include a combination of restrictions about software modification and usage",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="license_library.licensestyle",
            ),
        ),
        migrations.AddField(
            model_name="license",
            name="owner",
            field=models.ForeignKey(
                help_text="An owner is an entity that is the original author or custodian  of one or more software licenses, and which is responsible for the text of that license.",
                on_delete=django.db.models.deletion.PROTECT,
                to="organization.owner",
            ),
        ),
        migrations.AddField(
            model_name="license",
            name="tags",
            field=models.ManyToManyField(
                through="license_library.LicenseAssignedTag",
                to="license_library.licensetag",
            ),
        ),
    ]
