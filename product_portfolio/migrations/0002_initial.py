# Generated by Django 4.2.7 on 2023-11-27 21:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import dje.fields
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("workflow", "0001_initial"),
        ("component_catalog", "0004_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("license_library", "0002_initial"),
        ("product_portfolio", "0001_initial"),
        ("dje", "0002_initial"),
        ("organization", "0001_initial"),
    ]

    operations = [
        # Moved from generated 0001_initial.py because it was raising the following:
        # ValueError: Related model 'product_portfolio.product' cannot be resolved
        migrations.CreateModel(
            name="CodebaseResource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        related_name="%(class)ss",
                        to="product_portfolio.product",
                    ),
                ),
                (
                    "path",
                    models.CharField(
                        help_text="The full path value of a codebase resource (file or directory) in either the development or deployment codebase of a product.",
                        max_length=2000,
                    ),
                ),
                (
                    "is_deployment_path",
                    models.BooleanField(
                        default=False,
                        help_text="When set to Yes, indicates that this codebase resource identifies a path in the Deployment codebase. When set to No (the default value), indicates that this codebase resource identifies a path in the Development codebase.",
                    ),
                ),
                (
                    "additional_details",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="An optional JSON-formatted field to identify additional codebase resource attributes such as name, type, sha1, size, etc.",
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True,
                        help_text="Comments about the product codebase resource, provided by administrators, intended for viewing and maintenance by administrators only.",
                    ),
                ),
            ],
            options={
                "verbose_name": "codebase resource",
                "ordering": ("product", "path"),
            },
        ),
        migrations.AddField(
            model_name="productstatus",
            name="request_to_generate",
            field=models.ForeignKey(
                blank=True,
                help_text="Identify the product-based Request Template to use for generating a Request when a Product is set to this status. Note that this Template should not include any custom required fields, since DejaCode will be creating the Request automatically.",
                limit_choices_to={
                    "content_type__app_label": "product_portfolio",
                    "content_type__model": "product",
                    "include_applies_to": True,
                },
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="workflow.requesttemplate",
            ),
        ),
        migrations.AddField(
            model_name="productrelationstatus",
            name="dataspace",
            field=models.ForeignKey(
                editable=False,
                help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                on_delete=django.db.models.deletion.PROTECT,
                to="dje.dataspace",
            ),
        ),
        migrations.AddField(
            model_name="productpackageassignedlicense",
            name="dataspace",
            field=models.ForeignKey(
                editable=False,
                help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                on_delete=django.db.models.deletion.PROTECT,
                to="dje.dataspace",
            ),
        ),
        migrations.AddField(
            model_name="productpackageassignedlicense",
            name="license",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="license_library.license",
            ),
        ),
        migrations.AddField(
            model_name="productpackageassignedlicense",
            name="productpackage",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="product_portfolio.productpackage",
            ),
        ),
        migrations.AddField(
            model_name="productpackage",
            name="created_by",
            field=models.ForeignKey(
                editable=False,
                help_text="The application user who created the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="productpackage",
            name="dataspace",
            field=models.ForeignKey(
                editable=False,
                help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                on_delete=django.db.models.deletion.PROTECT,
                to="dje.dataspace",
            ),
        ),
        migrations.AddField(
            model_name="productpackage",
            name="last_modified_by",
            field=dje.fields.LastModifiedByField(
                editable=False,
                help_text="The application user who last modified the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="modified_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="productpackage",
            name="licenses",
            field=models.ManyToManyField(
                through="product_portfolio.ProductPackageAssignedLicense",
                to="license_library.license",
            ),
        ),
        migrations.AddField(
            model_name="productpackage",
            name="package",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="productpackages",
                to="component_catalog.package",
            ),
        ),
        migrations.AddField(
            model_name="productpackage",
            name="purpose",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="product_portfolio.productitempurpose",
            ),
        ),
        migrations.AddField(
            model_name="productpackage",
            name="review_status",
            field=models.ForeignKey(
                blank=True,
                help_text="The status of the Component or Package in the Product review and approval cycle, if known. Use a review_status that has been defined by your system administrator.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="product_portfolio.productrelationstatus",
            ),
        ),
        migrations.AddField(
            model_name="productitempurpose",
            name="dataspace",
            field=models.ForeignKey(
                editable=False,
                help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                on_delete=django.db.models.deletion.PROTECT,
                to="dje.dataspace",
            ),
        ),
        migrations.AddField(
            model_name="productcomponentassignedlicense",
            name="dataspace",
            field=models.ForeignKey(
                editable=False,
                help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                on_delete=django.db.models.deletion.PROTECT,
                to="dje.dataspace",
            ),
        ),
        migrations.AddField(
            model_name="productcomponentassignedlicense",
            name="license",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="license_library.license",
            ),
        ),
        migrations.AddField(
            model_name="productcomponentassignedlicense",
            name="productcomponent",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="product_portfolio.productcomponent",
            ),
        ),
        migrations.AddField(
            model_name="productcomponent",
            name="component",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="productcomponents",
                to="component_catalog.component",
            ),
        ),
        migrations.AddField(
            model_name="productcomponent",
            name="created_by",
            field=models.ForeignKey(
                editable=False,
                help_text="The application user who created the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="productcomponent",
            name="dataspace",
            field=models.ForeignKey(
                editable=False,
                help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                on_delete=django.db.models.deletion.PROTECT,
                to="dje.dataspace",
            ),
        ),
        migrations.AddField(
            model_name="productcomponent",
            name="last_modified_by",
            field=dje.fields.LastModifiedByField(
                editable=False,
                help_text="The application user who last modified the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="modified_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="productcomponent",
            name="licenses",
            field=models.ManyToManyField(
                through="product_portfolio.ProductComponentAssignedLicense",
                to="license_library.license",
            ),
        ),
        migrations.AddField(
            model_name="productcomponent",
            name="purpose",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="product_portfolio.productitempurpose",
            ),
        ),
        migrations.AddField(
            model_name="productcomponent",
            name="review_status",
            field=models.ForeignKey(
                blank=True,
                help_text="The status of the Component or Package in the Product review and approval cycle, if known. Use a review_status that has been defined by your system administrator.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="product_portfolio.productrelationstatus",
            ),
        ),
        migrations.AddField(
            model_name="productassignedlicense",
            name="dataspace",
            field=models.ForeignKey(
                editable=False,
                help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                on_delete=django.db.models.deletion.PROTECT,
                to="dje.dataspace",
            ),
        ),
        migrations.AddField(
            model_name="productassignedlicense",
            name="license",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="license_library.license",
            ),
        ),
        migrations.AddField(
            model_name="productassignedlicense",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="product_portfolio.product",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="components",
            field=models.ManyToManyField(
                through="product_portfolio.ProductComponent",
                to="component_catalog.component",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="configuration_status",
            field=models.ForeignKey(
                blank=True,
                help_text="The configuration status can be used to communicate the current stage of the review process and whether additional review is required.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="product_portfolio.productstatus",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="created_by",
            field=models.ForeignKey(
                editable=False,
                help_text="The application user who created the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="dataspace",
            field=models.ForeignKey(
                editable=False,
                help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                on_delete=django.db.models.deletion.PROTECT,
                to="dje.dataspace",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="last_modified_by",
            field=dje.fields.LastModifiedByField(
                editable=False,
                help_text="The application user who last modified the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="modified_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="licenses",
            field=models.ManyToManyField(
                through="product_portfolio.ProductAssignedLicense",
                to="license_library.license",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="owner",
            field=models.ForeignKey(
                blank=True,
                help_text="Owner is an optional field selected by the user to identify the original creator (copyright holder) of the  product. If this product is in its original, unmodified state, the product owner is associated with the original author/publisher. If this product has been copied and modified, the product  owner should be the owner that has copied and modified it.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="organization.owner",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="packages",
            field=models.ManyToManyField(
                through="product_portfolio.ProductPackage",
                to="component_catalog.package",
            ),
        ),
        migrations.AddField(
            model_name="codebaseresourceusage",
            name="created_by",
            field=models.ForeignKey(
                editable=False,
                help_text="The application user who created the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="codebaseresourceusage",
            name="dataspace",
            field=models.ForeignKey(
                editable=False,
                help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                on_delete=django.db.models.deletion.PROTECT,
                to="dje.dataspace",
            ),
        ),
        migrations.AddField(
            model_name="codebaseresourceusage",
            name="deployed_from",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="related_deployed_to",
                to="product_portfolio.codebaseresource",
            ),
        ),
        migrations.AddField(
            model_name="codebaseresourceusage",
            name="deployed_to",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="related_deployed_from",
                to="product_portfolio.codebaseresource",
            ),
        ),
        migrations.AddField(
            model_name="codebaseresourceusage",
            name="last_modified_by",
            field=dje.fields.LastModifiedByField(
                editable=False,
                help_text="The application user who last modified the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="modified_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="codebaseresource",
            name="created_by",
            field=models.ForeignKey(
                editable=False,
                help_text="The application user who created the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="codebaseresource",
            name="dataspace",
            field=models.ForeignKey(
                editable=False,
                help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                on_delete=django.db.models.deletion.PROTECT,
                to="dje.dataspace",
            ),
        ),
        migrations.AddField(
            model_name="codebaseresource",
            name="deployed_to",
            field=models.ManyToManyField(
                through="product_portfolio.CodebaseResourceUsage",
                to="product_portfolio.codebaseresource",
            ),
        ),
        migrations.AddField(
            model_name="codebaseresource",
            name="last_modified_by",
            field=dje.fields.LastModifiedByField(
                editable=False,
                help_text="The application user who last modified the object.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="modified_%(class)ss",
                serialize=False,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="codebaseresource",
            name="product_component",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(class)ss",
                to="product_portfolio.productcomponent",
            ),
        ),
        migrations.AddField(
            model_name="codebaseresource",
            name="product_package",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(class)ss",
                to="product_portfolio.productpackage",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="scancodeproject",
            unique_together={("dataspace", "uuid")},
        ),
        migrations.AlterUniqueTogether(
            name="productstatus",
            unique_together={("dataspace", "label"), ("dataspace", "uuid")},
        ),
        migrations.AlterUniqueTogether(
            name="productrelationstatus",
            unique_together={("dataspace", "label"), ("dataspace", "uuid")},
        ),
        migrations.AlterUniqueTogether(
            name="productpackageassignedlicense",
            unique_together={("productpackage", "license"), ("dataspace", "uuid")},
        ),
        migrations.AlterUniqueTogether(
            name="productpackage",
            unique_together={("product", "package"), ("dataspace", "uuid")},
        ),
        migrations.AlterUniqueTogether(
            name="productitempurpose",
            unique_together={("dataspace", "label"), ("dataspace", "uuid")},
        ),
        migrations.AlterUniqueTogether(
            name="productcomponentassignedlicense",
            unique_together={("productcomponent", "license"), ("dataspace", "uuid")},
        ),
        migrations.AlterUniqueTogether(
            name="productcomponent",
            unique_together={("product", "component"), ("dataspace", "uuid")},
        ),
        migrations.AlterUniqueTogether(
            name="productassignedlicense",
            unique_together={("product", "license"), ("dataspace", "uuid")},
        ),
        migrations.AlterUniqueTogether(
            name="product",
            unique_together={("dataspace", "name", "version"), ("dataspace", "uuid")},
        ),
        migrations.AlterUniqueTogether(
            name="codebaseresourceusage",
            unique_together={("deployed_from", "deployed_to"), ("dataspace", "uuid")},
        ),
        migrations.AlterUniqueTogether(
            name="codebaseresource",
            unique_together={("product", "path"), ("dataspace", "uuid")},
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION package_url(type text, namespace text, name text, version text, qualifiers text, subpath text)
            RETURNS text
            AS
            $$
               SELECT
                  format('pkg:%s/%s%s%s%s%s',
                      type,
                      NULLIF(namespace, '') || '/',
                      name,
                      '@' || NULLIF(version, ''),
                      '?' || NULLIF(qualifiers, ''),
                      '#' || NULLIF(subpath, '')
                  )
               WHERE type <> '' AND name <> '';
            $$
            LANGUAGE SQL;
            """,
            reverse_sql="DROP FUNCTION IF EXISTS package_url(type text, namespace text, name text, version text, qualifiers text, subpath text) CASCADE;"
        ),
        migrations.RunSQL(
            """
            DROP VIEW IF EXISTS product_portfolio_productinventoryitem;
            CREATE VIEW product_portfolio_productinventoryitem
            AS
               SELECT pc.uuid, pc.component_id, NULL as package_id, CONCAT(component.name, ' ', component.version) as item, 'component' as item_type, pc.dataspace_id, pc.product_id, pc.review_status_id, pc.feature, component.usage_policy_id, pc.created_date, pc.last_modified_date, pc.reference_notes, pc.purpose_id, pc.notes, pc.is_deployed, pc.is_modified, pc.extra_attribution_text, pc.package_paths, pc.issue_ref, pc.license_expression, pc.created_by_id, pc.last_modified_by_id
               FROM product_portfolio_productcomponent AS pc
               INNER JOIN component_catalog_component AS component ON pc.component_id=component.id
               UNION ALL
               SELECT pp.uuid, NULL as component_id, pp.package_id, package.filename as item, 'package' as item_type, pp.dataspace_id, pp.product_id, pp.review_status_id, pp.feature, package.usage_policy_id, pp.created_date, pp.last_modified_date, pp.reference_notes, pp.purpose_id, pp.notes, pp.is_deployed, pp.is_modified, pp.extra_attribution_text, pp.package_paths, pp.issue_ref, pp.license_expression, pp.created_by_id, pp.last_modified_by_id
               FROM product_portfolio_productpackage AS pp
               INNER JOIN component_catalog_package AS package ON pp.package_id=package.id
            ;
            """,
            reverse_sql="DROP VIEW IF EXISTS product_portfolio_productinventoryitem;"
        ),
    ]
