# Generated by Django 4.2.7 on 2023-11-27 21:12

import component_catalog.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import dje.fields
import product_portfolio.models
import re
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("dje", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ProductInventoryItem",
            fields=[
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "reference_notes",
                    models.TextField(
                        blank=True,
                        help_text="Reference Notes provide background details about the sofware and licenses in DejaCode, alerting you to pertinent ownership history or licensing complexities",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Free form text about how the component is being used in this context, especially useful if the information is needed for the review process.",
                    ),
                ),
                (
                    "is_deployed",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if the component is deployed in this context. Default = True.",
                    ),
                ),
                (
                    "is_modified",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the original third-party component has been modified. Default = False.",
                    ),
                ),
                (
                    "extra_attribution_text",
                    models.TextField(
                        blank=True,
                        help_text="Additional text to be supplied with the component when attribution is generated. For example, you may want to explain a license choice when the component is available under a choice of licenses.",
                    ),
                ),
                (
                    "package_paths",
                    models.TextField(
                        blank=True,
                        help_text="This field is deprecated in DejaCode. To define one or more specific location(s) of a Component in a Product, create a Product Codebase Resource for each location, specifying the codebase path and referencing the Product Component.",
                    ),
                ),
                (
                    "feature",
                    models.CharField(
                        blank=True,
                        help_text="Use this field to group components that are used together in a product.",
                        max_length=70,
                    ),
                ),
                (
                    "issue_ref",
                    models.CharField(
                        blank=True,
                        help_text="Reference (an ID or short title) for an Issue with a Product Inventory Item that needs to be addressed. Details of the issue and the actions taken may be recorded in another system.",
                        max_length=40,
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "license_expression",
                    models.CharField(
                        blank=True, max_length=1024, verbose_name="License expression"
                    ),
                ),
                ("item", models.CharField(blank=True, max_length=1024)),
                (
                    "item_type",
                    models.CharField(
                        blank=True,
                        choices=[("component", "component"), ("package", "package")],
                        max_length=20,
                    ),
                ),
            ],
            options={
                "db_table": "product_portfolio_productinventoryitem",
                "managed": False,
            },
            bases=(
                component_catalog.models.DefaultOnAdditionMixin,
                component_catalog.models.LicenseExpressionMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="CodebaseResourceUsage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
            ],
            options={
                "verbose_name": "codebase resource usage",
                "ordering": ("deployed_from", "deployed_to"),
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "request_count",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "keywords",
                    dje.fields.JSONListField(
                        blank=True,
                        default=list,
                        help_text="A keyword is a category or label that helps you to find items for particular requirements.",
                    ),
                ),
                (
                    "vcs_url",
                    models.CharField(
                        blank=True,
                        help_text="URL to the Version Control System (VCS).",
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[\\w+-_]+://[\\S]+$"),
                                code="invalid",
                                message="Enter a valid URI.",
                            )
                        ],
                        verbose_name="VCS URL",
                    ),
                ),
                (
                    "code_view_url",
                    models.URLField(
                        blank=True,
                        help_text="A URL that allows you to browse and view the source code online.",
                        max_length=1024,
                        verbose_name="Code view URL",
                    ),
                ),
                (
                    "bug_tracking_url",
                    models.URLField(
                        blank=True,
                        help_text="A URL to the bug reporting system.",
                        max_length=1024,
                        verbose_name="Bug tracking URL",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Name by which the product is commonly referenced.",
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[ .a-zA-Z0-9!#\"\\':,&()+_-]+$"),
                                "Enter a valid value consisting of spaces, periods, letters, numbers, or !#\"':,&()+_-.",
                                "invalid",
                            )
                        ],
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Identifies a specific version of a product. The combination of name + version uniquely identifies a product. If the version is (nv) or blank, it signifies an unstated/unknown version (or it indicates that version does not apply to the product), and it does not imply that the information in this product definition applies to any or all possible versions of the product.",
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[ .a-zA-Z0-9!#\"\\',&()+_-]+$"),
                                "Enter a valid value consisting of spaces, periods, letters, numbers, or !#\"',&()+_-.",
                                "invalid",
                            )
                        ],
                    ),
                ),
                (
                    "release_date",
                    models.DateField(
                        blank=True,
                        help_text="The date that the product was released by its owner.",
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Free form description, preferably as provided by the author(s).",
                    ),
                ),
                (
                    "copyright",
                    models.TextField(
                        blank=True,
                        help_text="The copyright statement(s) that pertain to this product, as contained in the source or as specified in an associated file.",
                    ),
                ),
                (
                    "homepage_url",
                    models.URLField(
                        blank=True,
                        help_text="Homepage URL for the product.",
                        max_length=1024,
                        verbose_name="Homepage URL",
                    ),
                ),
                (
                    "primary_language",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="The primary programming language associated with the product.",
                        max_length=50,
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True,
                        help_text="Comments about the product, provided by administrators, intended for viewing and maintenance by administrators only.",
                    ),
                ),
                (
                    "notice_text",
                    dje.fields.NoStripTextField(
                        blank=True,
                        help_text="The notice text provided by the authors of a product to identify the copyright statement(s), contributors, and/or license obligations that apply to a product.",
                    ),
                ),
                (
                    "license_expression",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text='On a component or a product in DejaCode, a license expression defines the relationship of one or more licenses to that software as declared by its licensor. More than one applicable license can be expressed as "license-key-a AND license-key-b". A choice of applicable licenses can be expressed as "license-key-a OR license-key-b", and you can indicate the primary (preferred) license by placing it first, on the left-hand side of the OR relationship. The relationship words (OR, AND) can be combined as needed, and the use of parentheses can be applied to clarify the meaning; for example "((license-key-a AND license-key-b) OR (license-key-c))". An exception to a license can be expressed as “license-key WITH license-exception-key".',
                        max_length=1024,
                        verbose_name="License expression",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="When set to Yes, this field indicates that a product definition is currently in use (active). When set to No, this field indicates that a product is deprecated (inactive), is no longer used, and the product will not appear in the user views. Note that this indicator applies only to a specific product version.",
                        verbose_name="active",
                    ),
                ),
                (
                    "contact",
                    models.CharField(
                        blank=True,
                        help_text="Identifies the person in your organization responsible for the development and release of the Product.",
                        max_length=255,
                    ),
                ),
            ],
            options={
                "ordering": ("name", "version"),
                "permissions": (("view_product", "Can view product"),),
                "abstract": False,
                "default_permissions": ("add", "change", "delete"),
            },
            bases=(
                component_catalog.models.DefaultOnAdditionMixin,
                component_catalog.models.LicenseExpressionMixin,
                product_portfolio.models.FieldChangesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ProductAssignedLicense",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
            ],
            options={
                "verbose_name": "product assigned license",
                "ordering": ("product__name", "license__name"),
            },
        ),
        migrations.CreateModel(
            name="ProductComponent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "reference_notes",
                    models.TextField(
                        blank=True,
                        help_text="Reference Notes provide background details about the sofware and licenses in DejaCode, alerting you to pertinent ownership history or licensing complexities",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Free form text about how the component is being used in this context, especially useful if the information is needed for the review process.",
                    ),
                ),
                (
                    "is_deployed",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if the component is deployed in this context. Default = True.",
                    ),
                ),
                (
                    "is_modified",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the original third-party component has been modified. Default = False.",
                    ),
                ),
                (
                    "extra_attribution_text",
                    models.TextField(
                        blank=True,
                        help_text="Additional text to be supplied with the component when attribution is generated. For example, you may want to explain a license choice when the component is available under a choice of licenses.",
                    ),
                ),
                (
                    "package_paths",
                    models.TextField(
                        blank=True,
                        help_text="This field is deprecated in DejaCode. To define one or more specific location(s) of a Component in a Product, create a Product Codebase Resource for each location, specifying the codebase path and referencing the Product Component.",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        related_name="%(class)ss",
                        to="product_portfolio.product",
                    ),
                ),
                (
                    "feature",
                    models.CharField(
                        blank=True,
                        help_text="Use this field to group components that are used together in a product.",
                        max_length=70,
                    ),
                ),
                (
                    "issue_ref",
                    models.CharField(
                        blank=True,
                        help_text="Reference (an ID or short title) for an Issue with a Product Inventory Item that needs to be addressed. Details of the issue and the actions taken may be recorded in another system.",
                        max_length=40,
                    ),
                ),
                (
                    "license_expression",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text='On a product component relationship (which defines a component as used in your product), a license expression is limited by the license(s) assigned to the original component, and expresses the license(s) that apply to the context of that component as it is used by your product. More than one applicable license can be expressed as "license-key-a AND license-key-b". A choice of licenses can be expressed as "license-key-a OR license-key-b", and you can indicate the primary license by placing it first, on the left-hand side of the OR relationship. You can also assert your license choice for the component as used in your product by editing the license expression to remove any license keys that do not apply. The relationship words (OR, AND) can be combined as needed, and the use of parentheses can be applied to clarify the meaning; for example "((license-key-a AND license-key-b) OR (license-key-c))". An exception to a license can be expressed as "license-key WITH license-exception-key".',
                        max_length=1024,
                        verbose_name="License expression",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text='A descriptive name for the Component (Component name). If you identified a DejaCode Component in the "component" field, this is not necessary; otherwise, you should provide the name used by the authors of the component.',
                        max_length=70,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[ .a-zA-Z0-9!#\"\\':,&()+_-]+$"),
                                "Enter a valid value consisting of spaces, periods, letters, numbers, or !#\"':,&()+_-.",
                                "invalid",
                            )
                        ],
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        blank=True,
                        help_text='The version of the Component (Component version). If you identified a DejaCode Component in the "component" field, this is not necessary; otherwise, you should provide the version used by the authors of the Component.',
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[ .a-zA-Z0-9!#\"\\',&()+_-]+$"),
                                "Enter a valid value consisting of spaces, periods, letters, numbers, or !#\"',&()+_-.",
                                "invalid",
                            )
                        ],
                    ),
                ),
                (
                    "owner",
                    models.CharField(
                        blank=True,
                        help_text='The creator, author, or source name of the Component. If you identified a DejaCode component in the "component" field, this is not necessary; otherwise, you should provide the name of the owner as provided by that owner in the Component documentation.',
                        max_length=70,
                    ),
                ),
                (
                    "copyright",
                    models.TextField(
                        blank=True,
                        help_text='The copyright statement for this Component. If you identified a DejaCode Component in the "component" field, this is not necessary.',
                    ),
                ),
                (
                    "homepage_url",
                    models.URLField(
                        blank=True,
                        help_text='URL to the source of the Component Package. If you identified a DejaCode Component in the "component" field, this is not necessary.',
                        max_length=1024,
                        verbose_name="Homepage URL",
                    ),
                ),
                (
                    "download_url",
                    models.CharField(
                        blank=True,
                        help_text='URL to the source of the Component Package. Once validated this should point to a Package. If you identified a DejaCode Component in the "component" field, and if it already has a Package defined with the download_url, then this is not necessary.',
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[\\w+-_]+://[\\S]+$"),
                                code="invalid",
                                message="Enter a valid URI.",
                            )
                        ],
                        verbose_name="Download URL",
                    ),
                ),
                (
                    "primary_language",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="The primary programming language associated with the component.",
                        max_length=50,
                    ),
                ),
            ],
            options={
                "verbose_name": "product component relationship",
                "ordering": ["product", "component"],
                "permissions": (
                    (
                        "change_review_status_on_productcomponent",
                        "Can change the review_status of product component relationship",
                    ),
                ),
            },
            bases=(
                component_catalog.models.DefaultOnAdditionMixin,
                component_catalog.models.LicenseExpressionMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ProductComponentAssignedLicense",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
            ],
            options={
                "verbose_name": "productcomponent assigned license",
                "ordering": ("productcomponent__name", "license__name"),
            },
        ),
        migrations.CreateModel(
            name="ProductItemPurpose",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "default_on_addition",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates this instance is automatically assigned by the application to an object when it is initially created.",
                        verbose_name="Default on addition",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="You can choose an icon to associate with the product item purpose from the available icons at https://fontawesome.com/icons?d=gallery&m=free",
                        max_length=50,
                    ),
                ),
                (
                    "color_code",
                    models.CharField(
                        blank=True,
                        help_text="You can specify a valid HTML color code (e.g. #FFFFFF) to apply to your icon.",
                        max_length=7,
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Concise name to identify the Purpose of the Product Component or Product Package.",
                        max_length=50,
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        help_text="Descriptive text to define the Purpose precisely."
                    ),
                ),
            ],
            options={
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="ProductPackage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "reference_notes",
                    models.TextField(
                        blank=True,
                        help_text="Reference Notes provide background details about the sofware and licenses in DejaCode, alerting you to pertinent ownership history or licensing complexities",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Free form text about how the component is being used in this context, especially useful if the information is needed for the review process.",
                    ),
                ),
                (
                    "is_deployed",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if the component is deployed in this context. Default = True.",
                    ),
                ),
                (
                    "is_modified",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the original third-party component has been modified. Default = False.",
                    ),
                ),
                (
                    "extra_attribution_text",
                    models.TextField(
                        blank=True,
                        help_text="Additional text to be supplied with the component when attribution is generated. For example, you may want to explain a license choice when the component is available under a choice of licenses.",
                    ),
                ),
                (
                    "package_paths",
                    models.TextField(
                        blank=True,
                        help_text="This field is deprecated in DejaCode. To define one or more specific location(s) of a Component in a Product, create a Product Codebase Resource for each location, specifying the codebase path and referencing the Product Component.",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        related_name="%(class)ss",
                        to="product_portfolio.product",
                    ),
                ),
                (
                    "feature",
                    models.CharField(
                        blank=True,
                        help_text="Use this field to group components that are used together in a product.",
                        max_length=70,
                    ),
                ),
                (
                    "issue_ref",
                    models.CharField(
                        blank=True,
                        help_text="Reference (an ID or short title) for an Issue with a Product Inventory Item that needs to be addressed. Details of the issue and the actions taken may be recorded in another system.",
                        max_length=40,
                    ),
                ),
                (
                    "license_expression",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text='On a product package relationship (which defines a package as used in your product), a license expression is limited by the license(s) assigned to the original package (unless none were assigned), and expresses the license(s) that apply to the context of that package as it is used by your product. More than one applicable license can be expressed as "license-key-a AND license-key-b". A choice of licenses can be expressed as "license-key-a OR license-key-b", and you can indicate the primary license by placing it first, on the left-hand side of the OR relationship. You can also assert your license choice for the package as used in your product by editing the license expression to remove any license keys that do not apply. The relationship words (OR, AND) can be combined as needed, and the use of parentheses can be applied to clarify the meaning; for example "((license-key-a AND license-key-b) OR (license-key-c))". An exception to a license can be expressed as "license-key WITH license-exception-key".',
                        max_length=1024,
                        verbose_name="License expression",
                    ),
                ),
            ],
            options={
                "verbose_name": "product package relationship",
                "ordering": ["product", "package"],
                "permissions": (
                    (
                        "change_review_status_on_productpackage",
                        "Can change the review_status of product package relationship",
                    ),
                ),
            },
            bases=(
                component_catalog.models.DefaultOnAdditionMixin,
                component_catalog.models.LicenseExpressionMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ProductPackageAssignedLicense",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
            ],
            options={
                "verbose_name": "productpackage assigned license",
                "ordering": ("productpackage", "license__name"),
            },
        ),
        migrations.CreateModel(
            name="ProductRelationStatus",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "default_on_addition",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates this instance is automatically assigned by the application to an object when it is initially created.",
                        verbose_name="Default on addition",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Concise name to identify the status.", max_length=50
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        help_text="Descriptive text to define the status purpose precisely."
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "product relation status",
                "ordering": ["label"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ScanCodeProject",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("IMPORT_FROM_MANIFEST", "Import from Manifest"),
                            ("PULL_FROM_SCANCODEIO", "Pull from ScanCode.io"),
                        ],
                        db_index=True,
                        help_text="The type of import, for the ProjectType choices.",
                        max_length=50,
                    ),
                ),
                (
                    "project_uuid",
                    models.UUIDField(
                        editable=False,
                        help_text="UUID of the ScanCode.io project instance.",
                        null=True,
                        verbose_name="Project UUID",
                    ),
                ),
                (
                    "input_file",
                    models.FileField(
                        max_length=350,
                        upload_to=product_portfolio.models.generate_input_file_path,
                    ),
                ),
                ("update_existing_packages", models.BooleanField(default=False)),
                ("scan_all_packages", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("submitted", "Submitted"),
                            ("success", "Completed"),
                            ("failure", "Failure"),
                        ],
                        db_index=True,
                        max_length=10,
                    ),
                ),
                (
                    "import_log",
                    models.JSONField(blank=True, default=list, editable=False),
                ),
                ("results", models.JSONField(blank=True, default=dict)),
                (
                    "created_by",
                    models.ForeignKey(
                        editable=False,
                        help_text="The application user who created the object.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)ss",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
                (
                    "last_modified_by",
                    dje.fields.LastModifiedByField(
                        editable=False,
                        help_text="The application user who last modified the object.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="modified_%(class)ss",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to="product_portfolio.product",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_date"],
            },
        ),
        migrations.CreateModel(
            name="ProductStatus",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "default_on_addition",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates this instance is automatically assigned by the application to an object when it is initially created.",
                        verbose_name="Default on addition",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Concise name to identify the status.", max_length=50
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        help_text="Descriptive text to define the status purpose precisely."
                    ),
                ),
                (
                    "dataspace",
                    models.ForeignKey(
                        editable=False,
                        help_text="A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dje.dataspace",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "product status",
                "ordering": ["label"],
                "abstract": False,
            },
        ),
    ]
