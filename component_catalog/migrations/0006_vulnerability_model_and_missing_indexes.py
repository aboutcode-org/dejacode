# Generated by Django 5.0.6 on 2024-08-21 11:20

import component_catalog.models
import django.db.models.deletion
import dje.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('component_catalog', '0005_remove_component_concluded_license_and_more'),
        ('dje', '0004_dataspace_vulnerabilities_updated_at'),
        ('license_library', '0002_initial'),
        ('policy', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='package',
            name='filename',
            field=models.CharField(blank=True, help_text='The exact file name (typically an archive of some type) of the package. This is usually the name of the file as downloaded from a website.', max_length=255, validators=[component_catalog.models.validate_filename], verbose_name='Filename'),
        ),
        migrations.AlterField(
            model_name='package',
            name='license_expression',
            field=models.CharField(blank=True, help_text='The License Expression assigned to a DejaCode Package or Component is an editable value equivalent to a "concluded license" as determined by a curator who has performed analysis to clarify or correct the declared license expression, which may have been assigned automatically (from a scan or an associated package definition) when the Package or Component was originally created. A license expression defines the relationship of one or more licenses to a software object. More than one applicable license can be expressed as "license-key-a AND license-key-b". A choice of applicable licenses can be expressed as "license-key-a OR license-key-b", and you can indicate the primary (preferred) license by placing it first, on the left-hand side of the OR relationship. The relationship words (OR, AND) can be combined as needed, and the use of parentheses can be applied to clarify the meaning; for example "((license-key-a AND license-key-b) OR (license-key-c))". An exception to a license can be expressed as "license-key WITH license-exception-key".', max_length=1024, verbose_name='Concluded license expression'),
        ),
        migrations.AlterField(
            model_name='package',
            name='md5',
            field=models.CharField(blank=True, help_text='MD5 checksum hex-encoded, as in md5sum.', max_length=32, verbose_name='MD5'),
        ),
        migrations.AlterField(
            model_name='package',
            name='primary_language',
            field=models.CharField(blank=True, help_text='The primary programming language associated with the package.', max_length=50),
        ),
        migrations.AlterField(
            model_name='package',
            name='project',
            field=models.CharField(blank=True, help_text='Project is a free-form label that you can use to group and find packages and components that interest you; for example, you may be starting a new development project, evaluating them for use in a product or you may want to get approval to use them.', max_length=50),
        ),
        migrations.AlterField(
            model_name='package',
            name='sha1',
            field=models.CharField(blank=True, help_text='SHA1 checksum hex-encoded, as in sha1sum.', max_length=40, verbose_name='SHA1'),
        ),
        migrations.AlterField(
            model_name='package',
            name='size',
            field=models.BigIntegerField(blank=True, help_text='The size of the package file in bytes.', null=True),
        ),
        migrations.CreateModel(
            name='Vulnerability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID')),
                ('created_date', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The date and time the object was created.')),
                ('last_modified_date', models.DateTimeField(auto_now=True, db_index=True, help_text='The date and time the object was last modified.')),
                ('vulnerability_id', models.CharField(help_text="A unique identifier for the vulnerability, prefixed with 'VCID-'. For example, 'VCID-2024-0001'.", max_length=20)),
                ('summary', models.TextField(blank=True, help_text='A brief summary of the vulnerability, outlining its nature and impact.')),
                ('aliases', dje.fields.JSONListField(blank=True, default=list, help_text="A list of aliases for this vulnerability, such as CVE identifiers (e.g., 'CVE-2017-1000136').")),
                ('references', dje.fields.JSONListField(blank=True, default=list, help_text='A list of references for this vulnerability. Each reference includes a URL, an optional reference ID, scores, and the URL for further details. ')),
                ('fixed_packages', dje.fields.JSONListField(blank=True, default=list, help_text='A list of packages that are not affected by this vulnerability.')),
                ('dataspace', models.ForeignKey(editable=False, help_text='A Dataspace is an independent, exclusive set of DejaCode data, which can be either nexB master reference data or installation-specific data.', on_delete=django.db.models.deletion.PROTECT, to='dje.dataspace')),
            ],
            options={
                'verbose_name_plural': 'Vulnerabilities',
            },
        ),
        migrations.AddField(
            model_name='component',
            name='affected_by_vulnerabilities',
            field=models.ManyToManyField(help_text='Vulnerabilities affecting this object.', related_name='affected_%(class)ss', to='component_catalog.vulnerability'),
        ),
        migrations.AddField(
            model_name='package',
            name='affected_by_vulnerabilities',
            field=models.ManyToManyField(help_text='Vulnerabilities affecting this object.', related_name='affected_%(class)ss', to='component_catalog.vulnerability'),
        ),
        migrations.AddIndex(
            model_name='package',
            index=models.Index(fields=['type'], name='component_c_type_4af44a_idx'),
        ),
        migrations.AddIndex(
            model_name='package',
            index=models.Index(fields=['namespace'], name='component_c_namespa_d10c6b_idx'),
        ),
        migrations.AddIndex(
            model_name='package',
            index=models.Index(fields=['name'], name='component_c_name_c82010_idx'),
        ),
        migrations.AddIndex(
            model_name='package',
            index=models.Index(fields=['version'], name='component_c_version_ad217d_idx'),
        ),
        migrations.AddIndex(
            model_name='package',
            index=models.Index(fields=['filename'], name='component_c_filenam_b60780_idx'),
        ),
        migrations.AddIndex(
            model_name='package',
            index=models.Index(fields=['size'], name='component_c_size_22e128_idx'),
        ),
        migrations.AddIndex(
            model_name='package',
            index=models.Index(fields=['primary_language'], name='component_c_primary_2e8211_idx'),
        ),
        migrations.AddIndex(
            model_name='package',
            index=models.Index(fields=['project'], name='component_c_project_74b1c0_idx'),
        ),
        migrations.AddIndex(
            model_name='package',
            index=models.Index(fields=['license_expression'], name='component_c_license_20719b_idx'),
        ),
        migrations.AddIndex(
            model_name='vulnerability',
            index=models.Index(fields=['vulnerability_id'], name='component_c_vulnera_e18d50_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vulnerability',
            unique_together={('dataspace', 'uuid'), ('dataspace', 'vulnerability_id')},
        ),
    ]
