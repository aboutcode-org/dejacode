# Generated by Django 4.2.7 on 2023-11-27 21:12

import component_catalog.models
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import dje.fields
import dje.models
import policy.models
import re
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AcceptableLinkage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                ("label", models.CharField(max_length=40)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="Component",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "reference_notes",
                    models.TextField(
                        blank=True,
                        help_text="Reference Notes provide background details about the sofware and licenses in DejaCode, alerting you to pertinent ownership history or licensing complexities",
                    ),
                ),
                (
                    "request_count",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "holder",
                    models.TextField(
                        blank=True,
                        help_text="The name(s) of the copyright holder(s) of a software package as documented in the code. This field is intended to record the copyright holder independently of copyright statement dates and formats, and generally corresponds to the owner of the associated software project.",
                    ),
                ),
                (
                    "keywords",
                    dje.fields.JSONListField(
                        blank=True,
                        default=list,
                        help_text="A keyword is a category or label that helps you to find items for particular requirements.",
                    ),
                ),
                (
                    "cpe",
                    models.CharField(
                        blank=True,
                        help_text="Common Platform Enumeration (CPE) is a standardized method of describing and identifying a computing asset. CPE does not necessarily identify a unique instance or version of a computing asset. For example, a CPE could identify a component name with a version range.",
                        max_length=1024,
                        verbose_name="CPE",
                    ),
                ),
                (
                    "vcs_url",
                    models.CharField(
                        blank=True,
                        help_text="URL to the Version Control System (VCS).",
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[\\w+-_]+://[\\S]+$"),
                                code="invalid",
                                message="Enter a valid URI.",
                            )
                        ],
                        verbose_name="VCS URL",
                    ),
                ),
                (
                    "code_view_url",
                    models.URLField(
                        blank=True,
                        help_text="A URL that allows you to browse and view the source code online.",
                        max_length=1024,
                        verbose_name="Code view URL",
                    ),
                ),
                (
                    "bug_tracking_url",
                    models.URLField(
                        blank=True,
                        help_text="A URL to the bug reporting system.",
                        max_length=1024,
                        verbose_name="Bug tracking URL",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Name by which the component is commonly referenced.",
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[ .a-zA-Z0-9!#\"\\':,&()+_-]+$"),
                                "Enter a valid value consisting of spaces, periods, letters, numbers, or !#\"':,&()+_-.",
                                "invalid",
                            )
                        ],
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Identifies a specific version of a component. The combination of name + version uniquely identifies a component. If the version is (nv) or blank, it signifies an unstated/unknown version (or it indicates that version does not apply to the component), and it does not imply that the information in this component definition applies to any or all possible versions of the component.",
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[ .a-zA-Z0-9!#\"\\',&()+_-]+$"),
                                "Enter a valid value consisting of spaces, periods, letters, numbers, or !#\"',&()+_-.",
                                "invalid",
                            )
                        ],
                    ),
                ),
                (
                    "release_date",
                    models.DateField(
                        blank=True,
                        help_text="The date that the component was released by its owner.",
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Free form description, preferably as provided by the author(s).",
                    ),
                ),
                (
                    "copyright",
                    models.TextField(
                        blank=True,
                        help_text="The copyright statement(s) that pertain to this component, as contained in the source or as specified in an associated file.",
                    ),
                ),
                (
                    "homepage_url",
                    models.URLField(
                        blank=True,
                        help_text="Homepage URL for the component.",
                        max_length=1024,
                        verbose_name="Homepage URL",
                    ),
                ),
                (
                    "primary_language",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="The primary programming language associated with the component.",
                        max_length=50,
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True,
                        help_text="Comments about the component, provided by administrators, intended for viewing and maintenance by administrators only.",
                    ),
                ),
                (
                    "notice_text",
                    dje.fields.NoStripTextField(
                        blank=True,
                        help_text="The notice text provided by the authors of a component to identify the copyright statement(s), contributors, and/or license obligations that apply to a component.",
                    ),
                ),
                (
                    "license_expression",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text='On a component or a product in DejaCode, a license expression defines the relationship of one or more licenses to that software as declared by its licensor. More than one applicable license can be expressed as "license-key-a AND license-key-b". A choice of applicable licenses can be expressed as "license-key-a OR license-key-b", and you can indicate the primary (preferred) license by placing it first, on the left-hand side of the OR relationship. The relationship words (OR, AND) can be combined as needed, and the use of parentheses can be applied to clarify the meaning; for example "((license-key-a AND license-key-b) OR (license-key-c))". An exception to a license can be expressed as “license-key WITH license-exception-key".',
                        max_length=1024,
                        verbose_name="License expression",
                    ),
                ),
                (
                    "approval_reference",
                    models.CharField(
                        blank=True,
                        help_text="The name or number of a document (e.g. approval document, contract, etc.) that indicates that the component is approved for use in your organization.",
                        max_length=200,
                    ),
                ),
                (
                    "guidance",
                    models.TextField(
                        blank=True,
                        help_text="Component usage guidance is provided by your organization to specify recommendations, requirements and restrictions regarding your usage of this component.",
                        verbose_name="Component usage guidance",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="When set to True (Yes), this field indicates that a component definition in the catalog is currently in use (active). When set to False (No), this field indicates that a component is deprecated (inactive) and should not be used, and the component will not appear in the user views. When the field value is Unknown, the component will not appear in the user views, usually suggesting that the component has not yet been evaluated.",
                        null=True,
                        verbose_name="Is active",
                    ),
                ),
                (
                    "curation_level",
                    models.PositiveSmallIntegerField(
                        db_index=True,
                        default=0,
                        help_text='A numeric value, from 0 to 100, that indicates the level of completeness of all the pertinent component data, as well as the state of that data being reviewed by a senior administrator. General guidelines: "10" indicates basic data present. "20" indicates copyright and notice data are provided. assigned. "30" indicates all license data are provided. "40" indicates all available technical details (including URLs and primary language) are provided. "50" indicates that relevant parent and child are provided. Any other values are at the discretion of a senior administrative reviewer.',
                        validators=[django.core.validators.MaxValueValidator(100)],
                    ),
                ),
                (
                    "completion_level",
                    models.PositiveSmallIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Completion level is a number automatically calculated by the application to indicate the completeness of the data for a specific component. Fields that influence the calculation include: Notice Text, Copyright, Description, Package, Homepage URL, Keyword, License, Notice Filename, Notice URL, Bug Tracking URL, Code View URL, Primary Language, Release Date, VCS URL, Owner, Type, and Version.",
                    ),
                ),
                (
                    "is_license_notice",
                    models.BooleanField(
                        help_text="Indicator (Yes, No, Unknown) regarding whether the notice text contains a statement about the licenses that apply to the component as a whole.",
                        null=True,
                    ),
                ),
                (
                    "is_copyright_notice",
                    models.BooleanField(
                        help_text="Indicator (Yes, No, Unknown) regarding whether the notice text contains one or more copyright statements that apply to the component as a whole.",
                        null=True,
                    ),
                ),
                (
                    "is_notice_in_codebase",
                    models.BooleanField(
                        help_text="Indicator (Yes, No, Unknown) regarding whether a notice is internal to a component (for example, if the notice text is in the source file header of the component).",
                        null=True,
                    ),
                ),
                (
                    "notice_filename",
                    models.CharField(
                        blank=True,
                        help_text="Optional filename to identify a notice file associated with a component. If a filename is not provided, the application will assume that this notice is internal to this component (for example, in a source file header).",
                        max_length=255,
                    ),
                ),
                (
                    "notice_url",
                    models.URLField(
                        blank=True,
                        help_text="A URL that contains notice text for a component.",
                        max_length=1024,
                        verbose_name="Notice URL",
                    ),
                ),
                (
                    "dependencies",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Identifies one or more potential dependencies required to deploy a component in a particular context, with an emphasis on dependencies that may have an impact on licensing and/or attribution obligations.",
                    ),
                ),
                (
                    "project",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Project is a free-form label that you can use to group and find packages and components that interest you; for example, you may be starting a new development project, evaluating them for use in a product or you may want to get approval to use them.",
                        max_length=50,
                    ),
                ),
                (
                    "codescan_identifier",
                    models.URLField(
                        blank=True,
                        help_text="A component identifier from a code scanning application.",
                        max_length=1024,
                    ),
                ),
                (
                    "website_terms_of_use",
                    models.TextField(
                        blank=True,
                        help_text="The Terms of Use or Terms of Service specified on a software project website. These are terms that apply in addition to or in absence of an asserted license for a component package.",
                    ),
                ),
                (
                    "ip_sensitivity_approved",
                    models.BooleanField(
                        default=False,
                        help_text="The component software can be combined with sensitive or critical IP, as determined by legal review. This information will be used for product architecture review.",
                        verbose_name="IP sensitivity approved",
                    ),
                ),
                (
                    "affiliate_obligations",
                    models.BooleanField(
                        default=False,
                        help_text="The component license contains terms that would impose obligations on a legal entity affiliate.",
                    ),
                ),
                (
                    "affiliate_obligation_triggers",
                    models.TextField(
                        blank=True,
                        help_text="Explanation of how affiliate obligations are triggered, and what is the mitigation strategy.",
                    ),
                ),
                (
                    "concluded_license",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="This is a memo field to record the conclusions of the legal team after full review and scanning of the component package, and is only intended to document that decision. The main value of the field is to clarify the company interpretation of the license that should apply to a component when there is a choice, or when there is ambiguity in the original component documentation.",
                        max_length=1024,
                    ),
                ),
                (
                    "legal_comments",
                    models.TextField(
                        blank=True,
                        help_text="Notes to be entered and shared among legal team members during the legal review process.",
                    ),
                ),
                (
                    "sublicense_allowed",
                    models.BooleanField(
                        help_text="The component license grants some or all of the rights acquired under the original license, and allows usage of the licensed code to be licensed under an overriding license, although obligations such as attribution generally still apply. This allowance is typical of permissive licenses, but is often not allowed in copyleft and proprietary licenses. The right to sublicense is explicit in some license texts (such as the MIT License) but is not always stated; implicit permission to sublicense is a legal interpretation.",
                        null=True,
                    ),
                ),
                (
                    "express_patent_grant",
                    models.BooleanField(
                        help_text="The license that applies to this component expressly grants a patent license.",
                        null=True,
                    ),
                ),
                (
                    "covenant_not_to_assert",
                    models.BooleanField(
                        help_text="The license that applies to this component has language that we agree not to assert our patents against users of a project under this license.",
                        null=True,
                    ),
                ),
                (
                    "indemnification",
                    models.BooleanField(
                        help_text="The license that applies to this component has one or more scenarios that require indemnification.",
                        null=True,
                    ),
                ),
                (
                    "legal_reviewed",
                    models.BooleanField(
                        default=False,
                        help_text="This component definition has been reviewed by the organization legal team.",
                    ),
                ),
                (
                    "distribution_formats_allowed",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Binary", "Binary"),
                            ("Source", "Source"),
                            ("All - Binary or Source", "All - Binary or Source"),
                        ],
                        default="",
                        help_text="The software distribution formats allowed by the component license.",
                        max_length=30,
                    ),
                ),
                (
                    "acceptable_linkages",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=40),
                        blank=True,
                        help_text="Your organization's legal review team can identify one or more specific linkages (software interactions) that are acceptable between this component and your organization's products in order to comply with your organization's license compliance standards.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "export_restrictions",
                    models.TextField(
                        blank=True,
                        help_text="The export restrictions and/or requirements associated with a component as determined by legal review.",
                    ),
                ),
                (
                    "approved_download_location",
                    models.URLField(
                        blank=True,
                        help_text="The link to a pristine (unmodified) component package download as specified by legal review.",
                        max_length=1024,
                    ),
                ),
                (
                    "approved_community_interaction",
                    models.TextField(
                        blank=True,
                        help_text="The community interaction allowed with this software project.",
                    ),
                ),
            ],
            options={
                "ordering": ("name", "version"),
                "permissions": (
                    (
                        "change_usage_policy_on_component",
                        "Can change the usage_policy of component",
                    ),
                ),
                "abstract": False,
            },
            bases=(
                policy.models.SetPolicyFromLicenseMixin,
                dje.models.ParentChildModelMixin,
                component_catalog.models.DefaultOnAdditionMixin,
                component_catalog.models.LicenseExpressionMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ComponentAssignedLicense",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
            ],
            options={
                "verbose_name": "Assigned license",
                "ordering": ("component__name", "license__name"),
            },
        ),
        migrations.CreateModel(
            name="ComponentAssignedPackage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
            ],
            options={
                "verbose_name": "component assigned package",
                "ordering": ("component", "package"),
            },
        ),
        migrations.CreateModel(
            name="ComponentKeyword",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        blank=True,
                        help_text="A short, descriptive label to categorize components and support searches, reports, filters, and facets.",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Additional remarks about the intention and purpose of a Keyword value.",
                    ),
                ),
            ],
            options={
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="ComponentStatus",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "default_on_addition",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates this instance is automatically assigned by the application to an object when it is initially created.",
                        verbose_name="Default on addition",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Concise name to identify the status.", max_length=50
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        help_text="Descriptive text to define the status purpose precisely."
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "component status",
                "ordering": ["label"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ComponentType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Label that indicates the scope, function, and complexity of a component. Every dataspace has its own list of component types. Examples include: product, package, project, assembly, module, platform, directory, file, snippet.",
                        max_length=50,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Optional descriptive text."
                    ),
                ),
            ],
            options={
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="Package",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "reference_notes",
                    models.TextField(
                        blank=True,
                        help_text="Reference Notes provide background details about the sofware and licenses in DejaCode, alerting you to pertinent ownership history or licensing complexities",
                    ),
                ),
                (
                    "request_count",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        help_text="A short code to identify the type of this package. For example: gem for a Rubygem, docker for a container, pypi for a Python Wheel or Egg, maven for a Maven Jar, deb for a Debian package, etc.",
                        max_length=16,
                    ),
                ),
                (
                    "namespace",
                    models.CharField(
                        blank=True,
                        help_text="Package name prefix, such as Maven groupid, Docker image owner, GitHub user or organization, etc.",
                        max_length=255,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, help_text="Name of the package.", max_length=100
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        blank=True, help_text="Version of the package.", max_length=100
                    ),
                ),
                (
                    "qualifiers",
                    models.CharField(
                        blank=True,
                        help_text="Extra qualifying data for a package such as the name of an OS, architecture, distro, etc.",
                        max_length=1024,
                    ),
                ),
                (
                    "subpath",
                    models.CharField(
                        blank=True,
                        help_text="Extra subpath within a package, relative to the package root.",
                        max_length=200,
                    ),
                ),
                (
                    "holder",
                    models.TextField(
                        blank=True,
                        help_text="The name(s) of the copyright holder(s) of a software package as documented in the code. This field is intended to record the copyright holder independently of copyright statement dates and formats, and generally corresponds to the owner of the associated software project.",
                    ),
                ),
                (
                    "keywords",
                    dje.fields.JSONListField(
                        blank=True,
                        default=list,
                        help_text="A keyword is a category or label that helps you to find items for particular requirements.",
                    ),
                ),
                (
                    "cpe",
                    models.CharField(
                        blank=True,
                        help_text="Common Platform Enumeration (CPE) is a standardized method of describing and identifying a computing asset. CPE does not necessarily identify a unique instance or version of a computing asset. For example, a CPE could identify a component name with a version range.",
                        max_length=1024,
                        verbose_name="CPE",
                    ),
                ),
                (
                    "homepage_url",
                    models.URLField(
                        blank=True,
                        help_text="Homepage URL.",
                        max_length=1024,
                        verbose_name="Homepage URL",
                    ),
                ),
                (
                    "vcs_url",
                    models.CharField(
                        blank=True,
                        help_text="URL to the Version Control System (VCS).",
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[\\w+-_]+://[\\S]+$"),
                                code="invalid",
                                message="Enter a valid URI.",
                            )
                        ],
                        verbose_name="VCS URL",
                    ),
                ),
                (
                    "code_view_url",
                    models.URLField(
                        blank=True,
                        help_text="A URL that allows you to browse and view the source code online.",
                        max_length=1024,
                        verbose_name="Code view URL",
                    ),
                ),
                (
                    "bug_tracking_url",
                    models.URLField(
                        blank=True,
                        help_text="A URL to the bug reporting system.",
                        max_length=1024,
                        verbose_name="Bug tracking URL",
                    ),
                ),
                (
                    "sha256",
                    models.CharField(
                        blank=True,
                        help_text="SHA256 checksum hex-encoded, as in sha256sum.",
                        max_length=64,
                        verbose_name="SHA256",
                    ),
                ),
                (
                    "sha512",
                    models.CharField(
                        blank=True,
                        help_text="SHA512 checksum hex-encoded, as in sha512sum.",
                        max_length=128,
                        verbose_name="SHA512",
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="The exact file name (typically an archive of some type) of the package. This is usually the name of the file as downloaded from a website.",
                        max_length=255,
                        validators=[component_catalog.models.validate_filename],
                        verbose_name="Filename",
                    ),
                ),
                (
                    "download_url",
                    models.CharField(
                        blank=True,
                        help_text="The download URL for obtaining the package.",
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[\\w+-_]+://[\\S]+$"),
                                code="invalid",
                                message="Enter a valid URI.",
                            )
                        ],
                        verbose_name="Download URL",
                    ),
                ),
                (
                    "sha1",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="The SHA1 signature of the package file.",
                        max_length=40,
                        verbose_name="SHA1",
                    ),
                ),
                (
                    "md5",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="The MD5 signature of the package file.",
                        max_length=32,
                        verbose_name="MD5",
                    ),
                ),
                (
                    "size",
                    models.BigIntegerField(
                        blank=True,
                        db_index=True,
                        help_text="The size of the package file in bytes.",
                        null=True,
                    ),
                ),
                (
                    "release_date",
                    models.DateField(
                        blank=True,
                        help_text="The date that the package file was created, or when it was posted to its original download source.",
                        null=True,
                    ),
                ),
                (
                    "primary_language",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="The primary programming language associated with the package.",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Free form description, preferably as provided by the author(s).",
                    ),
                ),
                (
                    "project",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Project is a free-form label that you can use to group and find packages and components that interest you; for example, you may be starting a new development project, evaluating them for use in a product or you may want to get approval to use them.",
                        max_length=50,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Descriptive information about the package.",
                    ),
                ),
                (
                    "license_expression",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text='On a package in DejaCode, a license expression defines the relationship of one or more licenses to that software as declared by its licensor. More than one applicable license can be expressed as "license-key-a AND license-key-b". A choice of applicable licenses can be expressed as "license-key-a OR license-key-b", and you can indicate the primary (preferred) license by placing it first, on the left-hand side of the OR relationship. The relationship words (OR, AND) can be combined as needed, and the use of parentheses can be applied to clarify the meaning; for example "((license-key-a AND license-key-b) OR (license-key-c))". An exception to a license can be expressed as “license-key WITH license-exception-key".',
                        max_length=1024,
                        verbose_name="License expression",
                    ),
                ),
                (
                    "copyright",
                    models.TextField(
                        blank=True,
                        help_text="The copyright statement(s) that pertain to this package, as contained in the source or as specified in an associated file.",
                    ),
                ),
                (
                    "notice_text",
                    dje.fields.NoStripTextField(
                        blank=True,
                        help_text="The notice text provided by the authors of a package to identify the copyright statement(s), contributors, and/or license obligations that apply to a package.",
                    ),
                ),
                (
                    "author",
                    models.TextField(
                        blank=True,
                        help_text="The name(s) of the author(s) of a software package as documented in the code.",
                    ),
                ),
                (
                    "dependencies",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Identifies one or more potential dependencies required to deploy a package in a particular context, with an emphasis on dependencies that may have an impact on licensing and/or attribution obligations.",
                    ),
                ),
                (
                    "repository_homepage_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to the page for this package in its package repository. This is typically different from the package homepage URL proper.",
                        max_length=1024,
                        verbose_name="Repository homepage URL",
                    ),
                ),
                (
                    "repository_download_url",
                    models.URLField(
                        blank=True,
                        help_text="Download URL to download the actual archive of code of this package in its package repository. This may be different from the actual download URL.",
                        max_length=1024,
                        verbose_name="Repository download URL",
                    ),
                ),
                (
                    "api_data_url",
                    models.URLField(
                        blank=True,
                        help_text="API URL to obtain structured data for this package such as the URL to a JSON or XML api its package repository.",
                        max_length=1024,
                        verbose_name="API data URL",
                    ),
                ),
                (
                    "declared_license",
                    models.TextField(
                        blank=True,
                        help_text="The declared license mention, tag or text as found in a package manifest. This can be a string, a list or dict of strings possibly nested, as found originally in the manifest.",
                    ),
                ),
                (
                    "datasource_id",
                    models.CharField(
                        blank=True,
                        help_text="The identifier for the datafile handler used to obtain this package.",
                        max_length=64,
                    ),
                ),
                (
                    "file_references",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of file paths and details for files referenced in a package manifest. These may not actually exist on the filesystem. The exact semantics and base of these paths is specific to a package type or datafile format.",
                    ),
                ),
                (
                    "parties",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="A list of parties such as a person, project or organization.",
                    ),
                ),
            ],
            options={
                "ordering": ["filename"],
                "permissions": (
                    (
                        "change_usage_policy_on_package",
                        "Can change the usage_policy of package",
                    ),
                ),
            },
            bases=(
                policy.models.SetPolicyFromLicenseMixin,
                component_catalog.models.LicenseExpressionMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="PackageAssignedLicense",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
            ],
            options={
                "verbose_name": "package assigned license",
            },
        ),
        migrations.CreateModel(
            name="Subcomponent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="The date and time the object was created.",
                    ),
                ),
                (
                    "last_modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="The date and time the object was last modified.",
                    ),
                ),
                (
                    "reference_notes",
                    models.TextField(
                        blank=True,
                        help_text="Reference Notes provide background details about the sofware and licenses in DejaCode, alerting you to pertinent ownership history or licensing complexities",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Free form text about how the component is being used in this context, especially useful if the information is needed for the review process.",
                    ),
                ),
                (
                    "is_deployed",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if the component is deployed in this context. Default = True.",
                    ),
                ),
                (
                    "is_modified",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the original third-party component has been modified. Default = False.",
                    ),
                ),
                (
                    "extra_attribution_text",
                    models.TextField(
                        blank=True,
                        help_text="Additional text to be supplied with the component when attribution is generated. For example, you may want to explain a license choice when the component is available under a choice of licenses.",
                    ),
                ),
                (
                    "package_paths",
                    models.TextField(
                        blank=True,
                        help_text="This field is deprecated in DejaCode. To define one or more specific location(s) of a Component in a Product, create a Product Codebase Resource for each location, specifying the codebase path and referencing the Product Component.",
                    ),
                ),
                (
                    "license_expression",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text='On a subcomponent relationship (which defines a child component of another component), a license expression is limited by the license(s) assigned to the child component, and expresses the license(s) that apply to the context of the child component as it is used by the parent component. More than one applicable license can be expressed as "license-key-a AND license-key-b". A choice of licenses can be expressed as "license-key-a OR license-key-b", and you can indicate the primary license as defined by your business by placing it first, on the left-hand side of the OR relationship. The relationship words (OR, AND) can be combined as needed, and the use of parentheses can be applied to clarify the meaning; for example "((license-key-a AND license-key-b) OR (license-key-c))". An exception to a license can be expressed as “license-key WITH license-exception-key".',
                        max_length=1024,
                        verbose_name="License expression",
                    ),
                ),
                (
                    "purpose",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Indicates how this component/package is used in this context. Suggested values are: Core, Test, Tool, Build, Reference, Requirement.",
                        max_length=50,
                    ),
                ),
            ],
            options={
                "verbose_name": "subcomponent relationship",
                "ordering": ["parent", "child"],
                "permissions": (
                    (
                        "change_usage_policy_on_subcomponent",
                        "Can change the usage_policy of subcomponent relationship",
                    ),
                ),
            },
            bases=(component_catalog.models.LicenseExpressionMixin, models.Model),
        ),
        migrations.CreateModel(
            name="SubcomponentAssignedLicense",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="UUID"
                    ),
                ),
            ],
            options={
                "verbose_name": "subcomponent assigned license",
            },
        ),
    ]
